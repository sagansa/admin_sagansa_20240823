{
    "conflicts": [
        {
            "id": "3f899632-42ae-4d14-a7f3-5fda150690f7",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Purchases;\nuse App\\Filament\\Filters\\DateFilter;\nuse App\\Filament\\Filters\\SelectPaymentTypeFilter;\nuse App\\Filament\\Filters\\SelectStoreFilter;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\DetailRequest;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse App\\Filament\\Resources\\Panel\\DetailRequestResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\DetailRequestResource\\RelationManagers;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Actions\\Action;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass DetailRequestResource extends Resource\n{\n    protected static ?string $model = DetailRequest::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 2;\n\n    protected static ?string $navigationGroup = 'Invoice';\n\n    protected static ?string $cluster = Purchases::class;\n\n    protected static ?string $pluralLabel = 'Invoice';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.detailRequests.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.detailRequests.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.detailRequests.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 2])->schema([\n                    Select::make('product_id')\n                        ->required()\n                        ->inlineLabel()\n                        ->relationship('product', 'name')\n                        ->disabled()\n                        ->preload(),\n\n                    Select::make('payment_type_id')\n                        ->required()\n                        ->inlineLabel()\n                        ->relationship('paymentType', 'name')\n                        ->preload()\n                        ,\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->groups([\n                'requestPurchase.date',\n                'store.nickname'\n            ])\n            // ->defaultGroup('requestPurchase.date')\n            ->columns([\n                TextColumn::make('product.name')\n                    ->label('Product'),\n                TextColumn::make('requestPurchase.date')\n                    ->label('Request Date'),\n                TextColumn::make('paymentType.name')\n                    ->label('Payment Type'),\n                TextColumn::make('store.nickname')\n                    ->label('Store'),\n\n                TextColumn::make('detailInvoices.quantity_product')\n                    ->formatStateUsing(fn (DetailRequest $record) => implode(', ', $record->detailInvoices->pluck('quantity_product')->all()))\n                    ->label('Qty Purchase'),\n\n                TextColumn::make('quantity_plan')\n                    ->label('Qty Plan')\n                    ->formatStateUsing(fn (DetailRequest $record) =>\n                        number_format($record->quantity_plan, 0, ',', '.') . ' ' .\n                            $record->product->unit->unit),\n\n                TextColumn::make('status')\n                    ->label('Status')\n                    ->badge()\n                    ->color(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'warning',\n                            '2' => 'success',\n                            '3' => 'danger',\n                            '4' => 'warning',\n                            '5' => 'danger',\n                            '6' => 'gray',\n                            default => $state,\n                        }\n                    )\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'process',\n                            '2' => 'done',\n                            '3' => 'reject',\n                            '4' => 'approved',\n                            '5' => 'not valid',\n                            '6' => 'not used',\n                            default => $state,\n                        }\n                    ),\n\n                    TextColumn::make('requestPurchase.user.name')\n                        ->label('Request By')\n                        ->hidden(fn () => !Auth::user()->hasRole('admin')),\n            ])\n            ->filters([\n                SelectStoreFilter::make('store_id'),\n                SelectPaymentTypeFilter::make('payment_type_id'),\n                DateFilter::make('delivery_date'),\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    // Tables\\Actions\\ViewAction::make(),\n                    Action::make('Update Payment Type To Cash')\n                        ->icon('heroicon-o-pencil-square')\n                        ->action(function ($record) {\n                            $record->update(['payment_type_id' => 2]);\n                        })\n                        ->requiresConfirmation(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                    Tables\\Actions\\BulkAction::make('setStatusToDone')\n                        ->label('Set Status to Done')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            DetailRequest::whereIn('id', $records->pluck('id'))->update(['status' => 2]);\n                        })\n                        ->color('success'),\n                    Tables\\Actions\\BulkAction::make('setStatusToReject')\n                        ->label('Set Status to Reject')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            DetailRequest::whereIn('id', $records->pluck('id'))->update(['status' => 3]);\n                        })\n                        ->color('danger'),\n                    Tables\\Actions\\BulkAction::make('setStatusToNot Valid')\n                        ->label('Set Status to Not Valid')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            DetailRequest::whereIn('id', $records->pluck('id'))->update(['status' => 5]);\n                        })\n                        ->color('warning'),\n                    Tables\\Actions\\BulkAction::make('setStatusToNotUsed')\n                        ->label('Set Status to Not Used')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            DetailRequest::whereIn('id', $records->pluck('id'))->update(['status' => 6]);\n                        })\n                        ->color('gray'),\n                ]),\n            ])\n            ->defaultSort('created_at', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListDetailRequests::route('/'),\n            'create' => Pages\\CreateDetailRequest::route('/create'),\n            'view' => Pages\\ViewDetailRequest::route('/{record}'),\n            'edit' => Pages\\EditDetailRequest::route('/{record}/edit'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\DetailRequest;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\DetailRequestResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\DetailRequestResource\\RelationManagers;\n\nclass DetailRequestResource extends Resource\n{\n    protected static ?string $model = DetailRequest::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.detailRequests.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.detailRequests.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.detailRequests.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('product_id')\n                        ->required()\n                        ->relationship('product', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('quantity_plan')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('request_purchase_id')\n                        ->required()\n                        ->relationship('requestPurchase', 'date')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('payment_type_id')\n                        ->required()\n                        ->relationship('paymentType', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('product.name'),\n\n                TextColumn::make('quantity_plan'),\n\n                TextColumn::make('notes')->limit(255),\n\n                TextColumn::make('requestPurchase.date'),\n\n                TextColumn::make('store.name'),\n\n                TextColumn::make('paymentType.name'),\n\n                TextColumn::make('status'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListDetailRequests::route('/'),\n            'create' => Pages\\CreateDetailRequest::route('/create'),\n            'view' => Pages\\ViewDetailRequest::route('/{record}'),\n            'edit' => Pages\\EditDetailRequest::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}