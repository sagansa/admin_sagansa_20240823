{
    "conflicts": [
        {
            "id": "d58e8e27-ee04-40b3-9fa4-2c5a47634455",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\n\nuse App\\Filament\\Columns\\CurrencyColumn;\nuse App\\Filament\\Columns\\ImageOpenUrlColumn;\nuse App\\Filament\\Columns\\SupplierColumn;\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\StoreSelect;\nuse App\\Filament\\Forms\\SupplierSelect;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource;\nuse App\\Filament\\Tables\\InvoicePurchaseTable;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Tables\\Actions\\AttachAction;\nuse Filament\\Tables\\Actions\\CreateAction;\nuse Filament\\Tables\\Columns\\SelectColumn;\nuse Filament\\Tables\\Columns\\Summarizers\\Sum;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass InvoicePurchasesRelationManager extends RelationManager\n{\n    protected static string $relationship = 'invoicePurchases';\n\n    protected static ?string $recordTitleAttribute = 'invoice_purchase_name';\n\n    public function form(Form $form): Form\n    {\n        return $form->schema([\n            //\n        ]);\n    }\n\n    public function table(Table $table): Table\n    {\n        return $table\n            ->columns(\n                InvoicePurchaseTable::schema()\n            )\n            ->filters([])\n            ->headerActions([\n                AttachAction::make()\n                    ->preloadRecordSelect()\n                    // ->multiple()\n                    ->recordTitle(fn(InvoicePurchase $record): string => \"{$record->invoice_purchase_name}\")\n                    ->recordSelectOptionsQuery(fn(Builder $query) => $query\n                        ->where('payment_status', 1)\n                        ->where('payment_type_id', 1))\n                    ->after(function (?InvoicePurchase $record) { // Note the ? before InvoicePurchase\n                        $record->update(['payment_status' => 2]);\n                    })\n            ])\n            ->actions([\n                // Tables\\Actions\\EditAction::make(),\n                // Tables\\Actions\\DeleteAction::make(),\n                Tables\\Actions\\DetachAction::make()\n                    ->action(function ($record) {\n                        $record->pivot->delete();\n                        $record->update(['payment_status' => 1]);\n                    }),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    // Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\DetachBulkAction::make()\n                        ->action(function (Collection $records) {\n                            foreach ($records as $record) {\n                                if ($record->pivot) {\n                                    $record->pivot->delete();\n                                }\n                                $record->update(['payment_status' => 1]);\n                            }\n                        }),\n                ]),\n            ]);\n    }\n\n    public static function canViewForRecord(Model $ownerRecord, string $pageClass): bool\n    {\n        return $ownerRecord->payment_for === 3;\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource;\n\nclass InvoicePurchasesRelationManager extends RelationManager\n{\n    protected static string $relationship = 'invoicePurchases';\n\n    protected static ?string $recordTitleAttribute = 'image';\n\n    public function form(Form $form): Form\n    {\n        return $form->schema([\n            Grid::make(['default' => 1])->schema([\n                FileUpload::make('image')\n                    ->rules(['image'])\n                    ->nullable()\n                    ->maxSize(1024)\n                    ->image()\n                    ->imageEditor()\n                    ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                Select::make('payment_type_id')\n                    ->required()\n                    ->relationship('paymentType', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                Select::make('store_id')\n                    ->required()\n                    ->relationship('store', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                Select::make('supplier_id')\n                    ->required()\n                    ->relationship('supplier', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                DatePicker::make('date')\n                    ->rules(['date'])\n                    ->required()\n                    ->native(false),\n\n                TextInput::make('taxes')\n                    ->required()\n                    ->numeric()\n                    ->step(1),\n\n                TextInput::make('discounts')\n                    ->required()\n                    ->numeric()\n                    ->step(1),\n\n                TextInput::make('total_price')\n                    ->required()\n                    ->numeric()\n                    ->step(1),\n\n                RichEditor::make('notes')\n                    ->nullable()\n                    ->string()\n                    ->fileAttachmentsVisibility('public'),\n\n                Select::make('payment_status')\n                    ->required()\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                Select::make('order_status')\n                    ->required()\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n            ]),\n        ]);\n    }\n\n    public function table(Table $table): Table\n    {\n        return $table\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('paymentType.name'),\n\n                TextColumn::make('store.name'),\n\n                TextColumn::make('supplier.name'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('taxes'),\n\n                TextColumn::make('discounts'),\n\n                TextColumn::make('total_price'),\n\n                TextColumn::make('notes')->limit(255),\n\n                TextColumn::make('created_by_id'),\n\n                TextColumn::make('createdBy.name'),\n\n                TextColumn::make('payment_status'),\n\n                TextColumn::make('order_status'),\n            ])\n            ->filters([])\n            ->headerActions([\n                Tables\\Actions\\CreateAction::make(),\n\n                Tables\\Actions\\AttachAction::make()->form(\n                    fn(Tables\\Actions\\AttachAction $action): array => [\n                        $action->getRecordSelect(),\n                    ]\n                ),\n            ])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\DeleteAction::make(),\n                Tables\\Actions\\DetachAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\DetachBulkAction::make(),\n                ]),\n            ]);\n    }\n}\n"
        }
    ]
}