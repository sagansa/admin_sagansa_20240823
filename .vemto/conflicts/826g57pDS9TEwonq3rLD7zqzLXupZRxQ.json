{
    "conflicts": [
        {
            "id": "0f1d7475-aaaa-4cd5-a66a-890cb69623e3",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Invoices;\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\Notes;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\InvoicePurchaseResource\\Pages;\nuse App\\Filament\\Tables\\InvoicePurchaseTable;\nuse App\\Models\\DetailRequest;\nuse App\\Models\\PaymentType;\nuse App\\Models\\Store;\nuse App\\Models\\Supplier;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass InvoicePurchaseResource extends Resource\n{\n    protected static ?string $model = InvoicePurchase::class;\n\n    protected static ?int $navigationSort = 3;\n\n    protected static ?string $navigationGroup = 'Purchase';\n\n    protected static ?string $cluster = Invoices::class;\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.invoicePurchases.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 2])->schema(\n                    static::getDetailsFormHeadSchema()),\n            ]),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    static::getItemsRepeater()\n                ])\n            ]),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema(\n                    static::getDetailsFormBottomSchema()),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $invoicePurchases = InvoicePurchase::query();\n\n        if (Auth::user()->hasRole('staff')) {\n            $invoicePurchases->where('created_by_id', Auth::id());\n        }\n\n        return $table\n            ->query($invoicePurchases)\n            ->poll('60s')\n            ->columns(\n                InvoicePurchaseTable::schema()\n            )\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            //\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListInvoicePurchases::route('/'),\n            'create' => Pages\\CreateInvoicePurchase::route('/create'),\n            'view' => Pages\\ViewInvoicePurchase::route('/{record}'),\n            'edit' => Pages\\EditInvoicePurchase::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getDetailsFormHeadSchema(): array\n    {\n\n\n        return [\n            ImageInput::make('image'),\n\n            Select::make('payment_type_id')\n                ->required()\n                ->reactive()\n                ->relationship(\n                    name: 'paymentType',\n                    modifyQueryUsing: fn (Builder $query) => $query->where('status', '1'),\n                )\n\n                ->getOptionLabelFromRecordUsing(fn (PaymentType $record) => \"{$record->name}\")\n                ->default(2)\n                ->disableOptionWhen(fn (string $value): bool => $value === '2')\n                ->in(fn (Select $component): array => array_keys($component->getEnabledOptions()))\n                ->preload()\n                ->native(false)\n                ->afterStateUpdated(function ($state, callable $set) {\n                    // $set('detailInvoices', null);\n                    // $set('store_id', null);\n                }),\n\n            Select::make('store_id')\n                ->required()\n                ->reactive()\n                ->relationship(\n                    name: 'store',\n                    modifyQueryUsing: fn (Builder $query) => $query->where('status','<>', '8'),\n                )\n                ->getOptionLabelFromRecordUsing(fn (Store $record) => \"{$record->nickname}\")\n                ->searchable()\n                ->preload()\n                ->native(false)\n                ->afterStateUpdated(function ($state, callable $set) {\n                    // $set('detailInvoices', null);\n                    // $set('payment_type_id', null);\n                }),\n\n            Select::make('supplier_id')\n                ->required()\n                ->relationship(\n                    name: 'supplier',\n                    modifyQueryUsing: fn (Builder $query) => $query->where('status','<>', '3'),\n                )\n                ->getOptionLabelFromRecordUsing(fn (Supplier $record) => \"{$record->supplier_name}\")\n                ->searchable()\n                ->preload()\n                ->native(false),\n\n            DateInput::make('date'),\n\n            // Placeholder::make('payment_status'),\n                // ->hidden(fn ($operation) => $operation === 'create'),\n                // ->content(fn (DetailRequest $record): string => [\n                //     '1' => __('belum dibayar'),\n                //     '2' => __('sudah dibayar'),\n                //     '3' => __('tidak valid'),\n                // ][$record->payment_status])\n                // ->columnSpan(2),\n\n            Select::make('order_status')\n                ->required()\n                ->hidden(fn ($operation) => $operation === 'create')\n                ->preload()\n                ->options([\n                    '1' => 'belum diterima',\n                    '2' => 'sudah diterima',\n                    '3' => 'dikembalikan',\n                ])\n                ->native(false),\n        ];\n    }\n\n    public static function getItemsRepeater(): Repeater\n    {\n        return Repeater::make('detailInvoices')\n            ->hiddenLabel()\n            ->minItems(1)\n            ->columns(['md' => 8])\n            ->relationship()\n            ->schema([\n                Select::make('detail_request_id')\n                    ->label('Detail Request')\n                    ->relationship(\n                        name: 'detailRequest',\n                        modifyQueryUsing: function (Builder $query, callable $get) {\n                            $paymentTypeId = $get('../../payment_type_id');\n                            $storeId = $get('../../store_id');\n\n                            $statusFilter = '';\n                                if ($paymentTypeId == 1) { // transfer\n                                    $statusFilter = '1'; // process dan approved\n                                } elseif ($paymentTypeId == 2) { // tunai\n                                    $statusFilter = '4'; // approved\n                            }\n\n                            $queryFinal = $query\n                                ->where('store_id', $storeId)\n                                ->where('status', $statusFilter);\n\n                            return $queryFinal;\n                        }\n                    )\n                    ->getOptionLabelFromRecordUsing(fn (DetailRequest $record) => \"{$record->detail_request_name}\")\n                    ->native(false)\n                    ->required()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    ->columnSpan(['md' => 4]),\n\n                TextInput::make('quantity_product')\n                    ->required()\n                    ->reactive()\n                    ->minValue(1)\n                    ->default(1)\n                    ->suffix(function (Get $get) {\n                        $detailRequest = DetailRequest::find($get('detail_request_id'));\n                        return $detailRequest ? $detailRequest->product->unit->unit : '';\n                    })\n                    ->columnSpan(['md' => 2]),\n\n                TextInput::make('subtotal_invoice')\n                    ->required()\n                    ->reactive()\n                    ->prefix('Rp')\n                    ->minValue(0)\n                    ->numeric()\n                    ->distinct()\n                    ->debounce(500)\n                    ->afterStateUpdated(function (Get $get, Set $set) {\n                        self::updateTotalPrice($get, $set);\n                    })\n\n                    ->columnSpan(['md' => 2]),\n            ])\n            ->afterStateUpdated(function (Get $get, Set $set) {\n                self::updateTotalPrice($get, $set);\n            });\n    }\n\n    public static function getDetailsFormBottomSchema(): array\n    {\n        return[\n            TextInput::make('taxes')\n                ->required()\n                ->minValue(0)\n                ->reactive()\n                ->numeric()\n                ->debounce(500)\n                ->default(0)\n                ->afterStateUpdated(function (Get $get, Set $set) {\n                    self::updateTotalPrice($get, $set);\n                }),\n\n            TextInput::make('discounts')\n                ->required()\n                ->minValue(0)\n                ->reactive()\n                ->numeric()\n                ->debounce(500)\n                ->default(0)\n                ->afterStateUpdated(function (Get $get, Set $set) {\n                    self::updateTotalPrice($get, $set);\n                }),\n\n            TextInput::make('total_price')\n                ->readOnly()\n                ->default(0)\n                ->minValue(0),\n\n            Notes::make('notes'),\n        ];\n    }\n\n    protected static function updateTotalPrice(Get $get, Set $set): void\n    {\n        // Get the repeater items or initialize to an empty array if null\n        $repeaterItems = $get('detailInvoices') ?? [];\n\n        $subtotalPrice = 0;\n        $totalPrice = 0;\n        $taxes = 0;\n        $discounts = 0;\n\n        $taxes = $get('taxes') !== null ? (int) $get('taxes') : 0;\n        $discounts = $get('discounts') !== null ? (int) $get('discounts') : 0;\n\n        foreach ($repeaterItems as $item) {\n            if (isset($item['subtotal_invoice'])) {\n                $subtotalPrice += (int) $item['subtotal_invoice'];\n            }\n        }\n\n        $totalPrice = $subtotalPrice + $taxes - $discounts;\n\n        // $set('subtotal_price', number_format($subtotalPrice, 0, ',', ''));\n        // $set('total_price', number_format($totalPrice, 0, ',', ''));\n        $set('subtotal_price', $subtotalPrice);\n        $set('total_price', $totalPrice);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\InvoicePurchaseResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\InvoicePurchaseResource\\RelationManagers;\n\nclass InvoicePurchaseResource extends Resource\n{\n    protected static ?string $model = InvoicePurchase::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.invoicePurchases.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Select::make('payment_type_id')\n                        ->required()\n                        ->relationship('paymentType', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('supplier_id')\n                        ->required()\n                        ->relationship('supplier', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('taxes')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('discounts')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('total_price')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('payment_status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('order_status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('paymentType.name'),\n\n                TextColumn::make('store.name'),\n\n                TextColumn::make('supplier.name'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('taxes'),\n\n                TextColumn::make('discounts'),\n\n                TextColumn::make('total_price'),\n\n                TextColumn::make('notes')->limit(255),\n\n                TextColumn::make('created_by_id'),\n\n                TextColumn::make('createdBy.name'),\n\n                TextColumn::make('payment_status'),\n\n                TextColumn::make('order_status'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [RelationManagers\\DetailInvoicesRelationManager::class];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListInvoicePurchases::route('/'),\n            'create' => Pages\\CreateInvoicePurchase::route('/create'),\n            'view' => Pages\\ViewInvoicePurchase::route('/{record}'),\n            'edit' => Pages\\EditInvoicePurchase::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}