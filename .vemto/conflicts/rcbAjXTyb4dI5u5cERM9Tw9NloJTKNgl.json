{
    "conflicts": [
        {
            "id": "45e937b2-1b59-4fac-bee7-403fcdbbc8b0",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\HRD;\nuse App\\Filament\\Forms\\BaseSelect;\nuse App\\Filament\\Forms\\BaseTextInput;\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse App\\Models\\Employee;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\DatePicker;\nuse App\\Filament\\Resources\\Panel\\EmployeeResource\\Pages;\nuse Filament\\Forms\\Components\\Tabs;\nuse Filament\\Forms\\Components\\Tabs\\Tab;\nuse Filament\\Forms\\Components\\Toggle;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Columns\\ToggleColumn;\nuse Humaidem\\FilamentMapPicker\\Fields\\OSMMap;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass EmployeeResource extends Resource\n{\n    protected static ?string $model = Employee::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $cluster = HRD::class;\n\n    protected static ?string $navigationGroup = 'Personal Data';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.employees.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.employees.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.employees.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Tabs::make('Tabs')->tabs([\n                Tab::make('Personal Information')\n                    ->schema([\n                        BaseTextInput::make('identity_no')\n                            ->numeric()\n                            ->autofocus(),\n\n                        BaseTextInput::make('nickname'),\n\n                        BaseTextInput::make('birth_place'),\n\n                        BaseTextInput::make('no_telp')\n                            ->numeric(),\n\n                        DateInput::make('birth_date'),\n\n                        BaseSelect::make('gender')\n                            ->options([\n                                '1' => 'male',\n                                '2' => 'female',\n                            ]),\n\n                        BaseSelect::make('religion')\n                            ->options([\n                                '1' => 'islam',\n                                '2' => 'kristen',\n                                '3' => 'katholik',\n                                '4' => 'hindu',\n                                '5' => 'budha',\n                                '6' => 'kong hu chu',\n                            ]),\n\n                        BaseSelect::make('marital_status')\n                            ->options([\n                                '1' => 'belum menikah',\n                                '2' => 'menikah',\n                                '3' => 'duda/janda'\n                            ]),\n                    ]),\n\n                Tab::make('Contact Information')\n                    ->schema([\n                        BaseTextInput::make('fathers_name')\n                            ->label('Father\\'s Name'),\n\n                        BaseTextInput::make('mothers_name')\n                            ->label('Mother\\'s Name'),\n\n                        BaseTextInput::make('parents_no_telp')\n                            ->numeric(),\n\n                        BaseTextInput::make('siblings_name')\n                            ->label('Sibling\\'s Name'),\n\n                        BaseTextInput::make('siblings_no_telp'),\n\n                        OSMMap::make('location')\n                            ->showMarker()\n                            ->draggable()\n                            ->extraControl([\n                                'zoomDelta'           => 1,\n                                'zoomSnap'            => 0.25,\n                                'wheelPxPerZoomLevel' => 60\n                            ])\n                            ->afterStateHydrated(function (Get $get, Set $set, $record) {\n                                if ($record) {\n                                    $latitude = $record->latitude;\n                                    $longitude = $record->longitude;\n\n                                    if ($latitude && $longitude) {\n                                            $set('location', ['lat' => $latitude, 'lng' => $longitude]);\n                                    }\n                                }\n                            })\n                            ->afterStateUpdated(function ($state, Get $get, Set $set) {\n                                $set('latitude', $state['lat']);\n                                $set('longitude', $state['lng']);\n                            })\n                            // tiles url (refer to https://www.spatialbias.com/2018/02/qgis-3.0-xyz-tile-layers/)\n                            ->tilesUrl('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n                        ),\n\n                        TextInput::make('latitude')->readOnly()\n                            // ->hiddenLabel()\n                            ->inlineLabel(),\n                            // ->placeholder('Latitude'),\n\n                        TextInput::make('longitude')->readOnly()\n                            // ->hiddenLabel()\n                            ->inlineLabel(),\n                            // ->placeholder('Longitude'),\n\n                        BaseTextInput::make('address'),\n\n                        BaseSelect::make('province_id')\n                            ->relationship('province', 'name')\n                            ->searchable()\n                            ->reactive()\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('city_id', null);\n                                $set('district_id', null);\n                                $set('subdistrict_id', null);\n                                $set('postal_code_id', null);\n                            }),\n\n                        BaseSelect::make('city_id')\n                            ->relationship('city', 'name')\n                            ->searchable()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $provinceId = $get('province_id');\n                                return \\App\\Models\\City::where('province_id', $provinceId)->pluck('name', 'id');\n                            })\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('district_id', null);\n                                $set('subdistrict_id', null);\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('district_id')\n                            ->nullable()\n                            ->relationship('district', 'name')\n                            ->searchable()\n                            ->inlineLabel()\n                            ->preload()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $cityId = $get('city_id');\n                                return \\App\\Models\\District::where('city_id', $cityId)->pluck('name', 'id');\n                            })\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('subdistrict_id', null);\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('subdistrict_id')\n                            ->nullable()\n                            ->relationship('subdistrict', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->inlineLabel()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $districtId = $get('district_id');\n                                return \\App\\Models\\Subdistrict::where('district_id', $districtId)->pluck('name', 'id');\n                            })\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('postal_code_id')\n                            ->label('Postal Code')\n                            ->nullable()\n                            ->preload()\n                            ->inlineLabel()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $provinceId = $get('province_id');\n                                $cityId = $get('city_id');\n                                $districtId = $get('district_id');\n                                $subdistrictId = $get('subdistrict_id');\n                                return \\App\\Models\\PostalCode::where('province_id', $provinceId)\n                                    ->where('city_id', $cityId)\n                                    ->where('district_id', $districtId)\n                                    ->where('subdistrict_id', $subdistrictId)\n                                    ->pluck('postal_code', 'id');\n                            }),\n\n\n\n\n                    ]),\n\n                Tab::make('Employee Infromation')\n                    ->schema([\n                        Toggle::make('bpjs')\n                            ->rules(['boolean'])\n                            ->inlineLabel()\n                            ->label('BPJS')\n                            ->required(),\n\n                        TextInput::make('bank_account_no')\n                            ->nullable()\n                            ->inlineLabel()\n                            ->numeric()\n                            ->string(),\n\n                        DatePicker::make('acceptance_date')\n                            ->rules(['date'])\n                            ->hidden(fn ($operation) => $operation === 'create')\n                            ->disabled(fn () => Auth::user()->hasRole('staff'))\n                            ->visible(fn ($record) => Auth::user()->hasRole('admin') || Auth::user()->hasRole('super_admin'))\n                            ->nullable(),\n\n                        BaseSelect::make('bank_id')\n                            ->relationship('bank', 'name'),\n\n\n                        BaseSelect::make('driving_license')\n                            ->options([\n                                '1' => 'A',\n                                '2' => 'C',\n                                '3' => 'A dan C'\n                            ]),\n\n                        BaseSelect::make('level_of_education')\n                            ->options([\n                                '1' => 'tidak sekolah',\n                                '2' => 'SD',\n                                '3' => 'SMP',\n                                '4' => 'SMA',\n                                '5' => 'D1',\n                                '6' => 'D3',\n                                '7' => 'D4/S1'\n                            ]),\n                    ]),\n\n                Tab::make('General Information')\n                    ->schema([\n                        ImageInput::make('image_identity_id')\n                            ->label('KTP')\n                            ->inlineLabel()\n                            ->directory('images/Employee'),\n\n                        ImageInput::make('image_selfie')\n                            ->label('Selfie')\n                            ->inlineLabel()\n                            ->directory('images/Employee'),\n                    ]),\n\n                ]),\n            ])->columns('full');\n\n\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n\n                ImageColumn::make('image_identity_id')->label('KTP')->visibility('public'),\n\n                ImageColumn::make('image_selfie')->label('Selfie')->visibility('public'),\n\n                TextColumn::make('identity_no')->label('NIK')->copyable(),\n\n                TextColumn::make('nickname')->searchable(),\n\n                TextColumn::make('no_telp')->searchable(),\n\n                TextColumn::make('birth_place')->sortable(),\n\n                TextColumn::make('birth_date')->sortable(),\n\n                TextColumn::make('fathers_name')->label('Father\\'s Name'),\n\n                TextColumn::make('mothers_name')->label('Mother\\'s Name'),\n\n                TextColumn::make('parents_no_telp'),\n\n                TextColumn::make('siblings_name')->label('Sibling\\'s Name'),\n\n                TextColumn::make('siblings_no_telp'),\n\n                ToggleColumn::make('bpjs')->label('BPJS'),\n\n                TextColumn::make('bank_account_no'),\n\n                TextColumn::make('acceptance_date')->since(),\n\n                TextColumn::make('bank.name'),\n\n                TextColumn::make('employeeStatus.name'),\n\n                TextColumn::make('gender')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'laki-laki',\n                            '2' => 'perempuan',\n\n                        }\n                    ),\n\n                TextColumn::make('religion')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'islam',\n                            '2' => 'kristen',\n                            '3' => 'katholik',\n                            '4' => 'hindu',\n                            '5' => 'budha',\n                            '6' => 'kong hu chu',\n\n                        }\n                    ),\n\n                TextColumn::make('driving_license')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'A',\n                            '2' => 'C',\n                            '3' => 'A dan C'\n\n                        }\n                    ),\n\n                TextColumn::make('marital_status')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'belum menikah',\n                            '2' => 'menikah',\n                            '3' => 'duda/janda'\n\n                        }\n                    ),\n\n                TextColumn::make('level_of_education')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'tidak sekolah',\n                            '2' => 'SD',\n                            '3' => 'SMP',\n                            '4' => 'SMA',\n                            '5' => 'D1',\n                            '6' => 'D3',\n                            '7' => 'D4/S1'\n\n                        }\n                    ),\n            ])\n            ->filters([])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListEmployees::route('/'),\n            'create' => Pages\\CreateEmployee::route('/create'),\n            'view' => Pages\\ViewEmployee::route('/{record}'),\n            'edit' => Pages\\EditEmployee::route('/{record}/edit'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse App\\Models\\Employee;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Tables\\Columns\\CheckboxColumn;\nuse App\\Filament\\Resources\\Panel\\EmployeeResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\EmployeeResource\\RelationManagers;\n\nclass EmployeeResource extends Resource\n{\n    protected static ?string $model = Employee::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'HRD';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.employees.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.employees.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.employees.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('identity_no')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('nickname')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('no_telp')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('birth_place')\n                        ->required()\n                        ->string(),\n\n                    DatePicker::make('birth_date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('fathers_name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('mothers_name')\n                        ->required()\n                        ->string(),\n\n                    RichEditor::make('address')\n                        ->required()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('province_id')\n                        ->required()\n                        ->relationship('province', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('city_id')\n                        ->required()\n                        ->relationship('city', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('district_id')\n                        ->required()\n                        ->relationship('district', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('subdistrict_id')\n                        ->required()\n                        ->relationship('subdistrict', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('postal_code_id')\n                        ->required()\n                        ->relationship('postalCode', 'id')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('parents_no_telp')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('siblings_name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('siblings_no_telp')\n                        ->required()\n                        ->string(),\n\n                    Checkbox::make('bpjs')\n                        ->rules(['boolean'])\n                        ->required()\n                        ->inline(),\n\n                    TextInput::make('bank_account_no')\n                        ->nullable()\n                        ->string(),\n\n                    DatePicker::make('acceptance_date')\n                        ->rules(['date'])\n                        ->nullable()\n                        ->native(false),\n\n                    TextInput::make('signs')\n                        ->nullable()\n                        ->string(),\n\n                    RichEditor::make('notes')\n                        ->required()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('user_id')\n                        ->required()\n                        ->relationship('user', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('bank_id')\n                        ->required()\n                        ->relationship('bank', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('employee_status_id')\n                        ->required()\n                        ->relationship('employeeStatus', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('gender')\n                        ->required()\n                        ->in([])\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('major')\n                        ->nullable()\n                        ->string(),\n\n                    TextInput::make('latitude')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('longitude')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    FileUpload::make('image_identity_id')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    FileUpload::make('image_selfie')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Select::make('religion')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('driving_license')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('marital_status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('level_of_education')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Checkbox::make('is_wfa')\n                        ->rules(['boolean'])\n                        ->required()\n                        ->inline(),\n\n                    Checkbox::make('is_banned')\n                        ->rules(['boolean'])\n                        ->required()\n                        ->inline(),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('identity_no'),\n\n                TextColumn::make('nickname'),\n\n                TextColumn::make('no_telp'),\n\n                TextColumn::make('birth_place'),\n\n                TextColumn::make('birth_date')->since(),\n\n                TextColumn::make('fathers_name'),\n\n                TextColumn::make('mothers_name'),\n\n                TextColumn::make('address')->limit(255),\n\n                TextColumn::make('province.name'),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('district.name'),\n\n                TextColumn::make('subdistrict.name'),\n\n                TextColumn::make('postalCode.id'),\n\n                TextColumn::make('parents_no_telp'),\n\n                TextColumn::make('siblings_name'),\n\n                TextColumn::make('siblings_no_telp'),\n\n                CheckboxColumn::make('bpjs'),\n\n                TextColumn::make('bank_account_no'),\n\n                TextColumn::make('acceptance_date')->since(),\n\n                TextColumn::make('signs'),\n\n                TextColumn::make('notes')->limit(255),\n\n                TextColumn::make('user.name'),\n\n                TextColumn::make('bank.name'),\n\n                TextColumn::make('employeeStatus.name'),\n\n                TextColumn::make('gender'),\n\n                TextColumn::make('major'),\n\n                TextColumn::make('latitude'),\n\n                TextColumn::make('longitude'),\n\n                ImageColumn::make('image_identity_id')->visibility('public'),\n\n                ImageColumn::make('image_selfie')->visibility('public'),\n\n                TextColumn::make('religion'),\n\n                TextColumn::make('driving_license'),\n\n                TextColumn::make('marital_status'),\n\n                TextColumn::make('level_of_education'),\n\n                CheckboxColumn::make('is_wfa'),\n\n                CheckboxColumn::make('is_banned'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListEmployees::route('/'),\n            'create' => Pages\\CreateEmployee::route('/create'),\n            'view' => Pages\\ViewEmployee::route('/{record}'),\n            'edit' => Pages\\EditEmployee::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}