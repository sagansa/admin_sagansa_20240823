{
    "conflicts": [
        {
            "id": "199409c0-a68c-436d-b17c-a7b212417470",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Purchases;\nuse App\\Filament\\Filters\\SelectPaymentTypeFilter;\nuse App\\Filament\\Forms\\CurrencyInput;\nuse App\\Filament\\Forms\\CurrencyRepeaterInput;\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\Notes;\nuse App\\Filament\\Forms\\StoreSelect;\nuse App\\Filament\\Forms\\SupplierSelect;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\InvoicePurchaseResource\\Pages;\nuse App\\Filament\\Tables\\InvoicePurchaseTable;\nuse App\\Models\\DetailRequest;\nuse App\\Models\\Supplier;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Database\\Eloquent\\Collection;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass InvoicePurchaseResource extends Resource\n{\n    protected static ?string $model = InvoicePurchase::class;\n\n    protected static ?int $navigationSort = 3;\n\n    protected static ?string $navigationGroup = 'Invoice';\n\n    protected static ?string $pluralLabel = 'Invoices';\n\n    protected static ?string $cluster = Purchases::class;\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.invoicePurchases.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n\n            Group::make()\n                ->schema([\n                    Section::make()\n                        ->schema(static::getDetailsFormHeadSchema())\n                        ->columns(2),\n\n                    Section::make()\n                        ->schema([static::getItemsRepeater()]),\n                ])\n                ->columnSpan(['lg' => 2]),\n\n            Section::make()\n                ->schema(static::getDetailsFormBottomSchema())\n                ->columnSpan(['lg' => 1]),\n        ])\n        ->columns(3);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $invoicePurchases = InvoicePurchase::query();\n\n        if (!Auth::user()->hasRole('admin')) {\n            $invoicePurchases->where('created_by_id', Auth::id());\n        }\n\n        return $table\n            ->query($invoicePurchases)\n            ->poll('60s')\n            ->columns(\n                InvoicePurchaseTable::schema()\n            )\n            ->filters([\n                SelectPaymentTypeFilter::make('payment_type_id'),\n\n                SelectFilter::make('store_id')\n                    ->label('Store')\n                    ->searchable()\n                    ->relationship('store', 'nickname'),\n\n                SelectFilter::make('supplier_id')\n                    ->label('Supplier')\n                    ->searchable()\n                    ->relationship('supplier', 'name'),\n\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                    Tables\\Actions\\BulkAction::make('setPaymentStatusToOne')\n                        ->label('Set Payment Status to Belum Dibayar')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            InvoicePurchase::whereIn('id', $records->pluck('id'))->update(['payment_status' => 1]);\n                        })\n                        ->color('warning'),\n                    Tables\\Actions\\BulkAction::make('setOrderStatusToOne')\n                        ->label('Set Order Status to Belum Diterima')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            InvoicePurchase::whereIn('id', $records->pluck('id'))->update(['order_status' => 1]);\n                        })\n                        ->color('warning'),\n                ]),\n            ])\n            ->defaultSort('date', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            //\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListInvoicePurchases::route('/'),\n            'create' => Pages\\CreateInvoicePurchase::route('/create'),\n            'view' => Pages\\ViewInvoicePurchase::route('/{record}'),\n            'edit' => Pages\\EditInvoicePurchase::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getDetailsFormHeadSchema(): array\n    {\n\n\n        return [\n            ImageInput::make('image')\n                ->directory('images/InvoicePurchase'),\n\n            SupplierSelect::make('supplier_id'),\n\n            StoreSelect::make('store_id'),\n\n            Select::make('payment_type_id')\n                ->required()\n                ->reactive()\n                ->relationship(\n                    name: 'paymentType',\n                    titleAttribute: 'name',\n                    modifyQueryUsing: fn (Builder $query) => $query->where('status', '1'),\n                )\n                ->default(2)\n                ->inlineLabel()\n                ->preload(),\n                // ->afterStateUpdated(function (Set $set) {\n                    // $set('detailInvoices', null);\n                // }),\n\n            DateInput::make('date'),\n\n            Select::make('payment_status')\n                ->required(fn () => Auth::user()->hasRole('admin'))\n                ->disabled(fn () => !Auth::user()->hasRole('admin'))\n                ->hidden(fn ($operation) => $operation === 'create')\n                ->preload()\n                ->inlineLabel()\n                ->options([\n                    '1' => 'belum dibayar',\n                    '2' => 'sudah dibayar',\n                    '3' => 'tidak valid',\n                ])\n                ,\n\n            Select::make('order_status')\n                ->required()\n                ->hidden(fn ($operation) => $operation === 'create')\n                ->preload()\n                ->inlineLabel()\n                ->options([\n                    '1' => 'belum diterima',\n                    '2' => 'sudah diterima',\n                    '3' => 'dikembalikan',\n                ])\n                ,\n        ];\n    }\n\n    public static function getItemsRepeater(): Repeater\n    {\n        return Repeater::make('detailInvoices')\n            ->hiddenLabel()\n            ->minItems(1)\n            ->mutateRelationshipDataBeforeCreateUsing(function (array $data, InvoicePurchase $record): array {\n                $data['status'] = '3';\n\n                return $data;\n            })\n            ->columns(['md' => 8])\n            ->relationship()\n            ->schema([\n                Select::make('detail_request_id')\n                    // ->label('Detail Order')\n                    ->hiddenLabel()\n                    ->placeholder('product')\n                    ->relationship(\n                        name: 'detailRequest',\n                        modifyQueryUsing: function (Builder $query, callable $get) {\n                            $paymentTypeId = $get('../../payment_type_id');\n                            $storeId = $get('../../store_id');\n\n                            $paymentTypeFilter = null;\n                                if ($paymentTypeId == '2') {\n                                    $paymentTypeFilter = '2';\n                                }\n\n                                $queryFinal = $query\n                                    ->where('store_id', $storeId)\n                                    ->when($paymentTypeFilter, function ($query) use ($paymentTypeFilter) {\n                                        $query->where('payment_type_id', $paymentTypeFilter);\n                                    })\n                                    ->orderBy('id', 'desc');\n                            return $queryFinal;\n                        }\n                    )\n                    ->getOptionLabelFromRecordUsing(fn (DetailRequest $record) => \"{$record->detail_request_name}\")\n\n                    ->required()\n                    ->preload()\n                    ->searchable()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    ->columnSpan(['md' => 4]),\n\n                TextInput::make('quantity_product')\n                    ->hiddenLabel()\n                    ->placeholder('quantity')\n                    ->required()\n                    ->reactive()\n                    ->minValue(1)\n                    ->default(1)\n                    ->suffix(function (Get $get) {\n                        $detailRequest = DetailRequest::find($get('detail_request_id'));\n                        return $detailRequest ? $detailRequest->product->unit->unit : '';\n                    })\n                    ->columnSpan(['md' => 2]),\n\n                CurrencyRepeaterInput::make('subtotal_invoice')\n                    ->placeholder('subtotal')\n                    ->afterStateUpdated(function (Get $get, Set $set) {\n                        self::updateTotalPrice($get, $set);\n                    })\n\n                    ->columnSpan(['md' => 2]),\n            ])\n            ->afterStateUpdated(function (Get $get, Set $set) {\n                self::updateTotalPrice($get, $set);\n            });\n    }\n\n    public static function getDetailsFormBottomSchema(): array\n    {\n        return[\n            CurrencyInput::make('taxes')\n                ->reactive()\n                ->debounce(2000)\n                ->inlineLabel()\n                ->afterStateUpdated(function (Get $get, Set $set) {\n                    self::updateTotalPrice($get, $set);\n                }),\n\n            CurrencyInput::make('discounts')\n                ->reactive()\n                ->debounce(2000)\n                ->inlineLabel()\n                ->afterStateUpdated(function (Get $get, Set $set) {\n                    self::updateTotalPrice($get, $set);\n                }),\n\n            CurrencyInput::make('total_price')\n                ->inlineLabel()\n                ->readOnly(),\n\n            Notes::make('notes'),\n        ];\n    }\n\n    protected static function updateTotalPrice(Get $get, Set $set): void\n    {\n        // Get the repeater items or initialize to an empty array if null\n        $repeaterItems = $get('detailInvoices') ?? [];\n\n        $subtotalPrice = 0;\n        $totalPrice = 0;\n        $taxes = 0;\n        $discounts = 0;\n\n        $taxes = $get('taxes') !== null ? (int) $get('taxes') : 0;\n        $discounts = $get('discounts') !== null ? (int) $get('discounts') : 0;\n\n        foreach ($repeaterItems as $item) {\n            if (isset($item['subtotal_invoice'])) {\n                $subtotalPrice += (int) $item['subtotal_invoice'];\n            }\n        }\n\n        $totalPrice = $subtotalPrice + $taxes - $discounts;\n\n        $set('subtotal_price', $subtotalPrice);\n        $set('total_price', $totalPrice);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\InvoicePurchaseResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\InvoicePurchaseResource\\RelationManagers;\n\nclass InvoicePurchaseResource extends Resource\n{\n    protected static ?string $model = InvoicePurchase::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.invoicePurchases.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.invoicePurchases.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Select::make('payment_type_id')\n                        ->required()\n                        ->relationship('paymentType', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('supplier_id')\n                        ->required()\n                        ->relationship('supplier', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('taxes')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('discounts')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('total_price')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('payment_status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('order_status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('paymentType.name'),\n\n                TextColumn::make('store.name'),\n\n                TextColumn::make('supplier.name'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('taxes'),\n\n                TextColumn::make('discounts'),\n\n                TextColumn::make('total_price'),\n\n                TextColumn::make('notes')->limit(255),\n\n                TextColumn::make('created_by_id'),\n\n                TextColumn::make('createdBy.name'),\n\n                TextColumn::make('payment_status'),\n\n                TextColumn::make('order_status'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [RelationManagers\\DetailInvoicesRelationManager::class];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListInvoicePurchases::route('/'),\n            'create' => Pages\\CreateInvoicePurchase::route('/create'),\n            'view' => Pages\\ViewInvoicePurchase::route('/{record}'),\n            'edit' => Pages\\EditInvoicePurchase::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}