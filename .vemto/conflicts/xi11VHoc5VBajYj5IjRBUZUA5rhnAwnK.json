{
    "conflicts": [
        {
            "id": "5af9ad33-068c-4f44-9f10-867b96c89277",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Forms\\DeliveryAddressForm;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\DeliveryAddress;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\Pages;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass DeliveryAddressResource extends Resource\n{\n    protected static ?string $model = DeliveryAddress::class;\n\n    protected static ?int $navigationSort = 4;\n\n    protected static ?string $navigationGroup = 'Sales';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema(DeliveryAddressForm::schema())\n            ])\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $query = DeliveryAddress::query();\n\n        if (Auth::user()->hasRole('storage-staff')) {\n            $query->where('for', 3);\n        } elseif (Auth::user()->hasRole('sales')) {\n            $query->where('user_id', Auth::id());\n        } elseif (Auth::user()->hasRole('customer')) {\n            $query->where('user_id', Auth::id());\n        }\n\n        return $table\n            ->query($query)\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name'),\n\n                TextColumn::make('recipients_name'),\n\n                TextColumn::make('recipients_telp_no')\n                    ->label('Telephone'),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('user.name')\n                    ->visible(fn ($record) => auth()->user()->hasRole('admin') || auth()->user()->hasRole('super_admin'))\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListDeliveryAddresses::route('/'),\n            'create' => Pages\\CreateDeliveryAddress::route('/create'),\n            'view' => Pages\\ViewDeliveryAddress::route('/{record}'),\n            'edit' => Pages\\EditDeliveryAddress::route('/{record}/edit'),\n        ];\n    }\n\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\DeliveryAddress;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\RelationManagers;\n\nclass DeliveryAddressResource extends Resource\n{\n    protected static ?string $model = DeliveryAddress::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('recipients_name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('recipients_telp_no')\n                        ->nullable()\n                        ->string(),\n\n                    TextInput::make('address')\n                        ->required()\n                        ->string(),\n\n                    Select::make('province_id')\n                        ->required()\n                        ->relationship('province', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('city_id')\n                        ->required()\n                        ->relationship('city', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('district_id')\n                        ->required()\n                        ->relationship('district', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('subdistrict_id')\n                        ->required()\n                        ->relationship('subdistrict', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('postal_code_id')\n                        ->required()\n                        ->relationship('postalCode', 'id')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('latitude')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('longitude')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('for')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('user_id')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name'),\n\n                TextColumn::make('recipients_name'),\n\n                TextColumn::make('recipients_telp_no'),\n\n                TextColumn::make('address'),\n\n                TextColumn::make('province.name'),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('district.name'),\n\n                TextColumn::make('subdistrict.name'),\n\n                TextColumn::make('postalCode.id'),\n\n                TextColumn::make('latitude'),\n\n                TextColumn::make('longitude'),\n\n                TextColumn::make('for'),\n\n                TextColumn::make('user_id'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListDeliveryAddresses::route('/'),\n            'create' => Pages\\CreateDeliveryAddress::route('/create'),\n            'view' => Pages\\ViewDeliveryAddress::route('/{record}'),\n            'edit' => Pages\\EditDeliveryAddress::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}