{
    "conflicts": [
        {
            "id": "d7c13218-91b9-41f4-8771-deb6084df1b7",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Sales;\nuse App\\Filament\\Forms\\DeliveryAddressForm;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\DeliveryAddress;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\RelationManagers;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Humaidem\\FilamentMapPicker\\Fields\\OSMMap;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass DeliveryAddressResource extends Resource\n{\n    protected static ?string $model = DeliveryAddress::class;\n\n    protected static ?int $navigationSort = 4;\n\n    protected static ?string $navigationGroup = 'Sales';\n\n    protected static ?string $pluralLabel = 'Delivery Address';\n\n    protected static ?string $cluster = Sales::class;\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 2])\n                    ->schema([\n                        OSMMap::make('location')\n                            ->label('Location')\n                            ->showMarker()\n                            ->draggable()\n                            ->extraControl([\n                                'zoomDelta'           => 1,\n                                'zoomSnap'            => 0.25,\n                                'wheelPxPerZoomLevel' => 60\n                            ])\n                            ->afterStateHydrated(function (Get $get, Set $set, $record) {\n                                if ($record) {\n                                    $latitude = $record->latitude;\n                                    $longitude = $record->longitude;\n\n                                    if ($latitude && $longitude) {\n                                            $set('location', ['lat' => $latitude, 'lng' => $longitude]);\n                                    }\n                                }\n                            })\n                            ->afterStateUpdated(function ($state, Get $get, Set $set) {\n                                $set('latitude', $state['lat']);\n                                $set('longitude', $state['lng']);\n                            })\n                            // tiles url (refer to https://www.spatialbias.com/2018/02/qgis-3.0-xyz-tile-layers/)\n                            ->tilesUrl('https://server.arcgisonline.com/ArcGIS/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}'\n                        ),\n\n                        TextInput::make('latitude')->readOnly(),\n\n                        TextInput::make('longitude')->readOnly(),\n\n                        TextInput::make('name')\n                            ->placeholder('Rumah, Kantor, atau Lain-lain')\n                            ->required(),\n\n                        TextInput::make('recipient_name')\n                            ->required(),\n\n                        TextInput::make('recipient_telp_no')\n                            ->label('Telephone')\n                            ->numeric()\n                            ->nullable(),\n\n                        TextInput::make('address')\n                            ->required(),\n\n                        Select::make('province_id')\n                            ->label('Province')\n                            ->required()\n                            ->relationship('province', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->reactive()\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('city_id', null);\n                                $set('district_id', null);\n                                $set('subdistrict_id', null);\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('city_id')\n                            ->required()\n                            ->relationship('city', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $provinceId = $get('province_id');\n                                return \\App\\Models\\City::where('province_id', $provinceId)->pluck('name', 'id');\n                            })\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('district_id', null);\n                                $set('subdistrict_id', null);\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('district_id')\n                            ->nullable()\n                            ->relationship('district', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $cityId = $get('city_id');\n                                return \\App\\Models\\District::where('city_id', $cityId)->pluck('name', 'id');\n                            })\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('subdistrict_id', null);\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('subdistrict_id')\n                            ->nullable()\n                            ->relationship('subdistrict', 'name')\n                            ->searchable()\n                            ->preload()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $districtId = $get('district_id');\n                                return \\App\\Models\\Subdistrict::where('district_id', $districtId)->pluck('name', 'id');\n                            })\n                            ->afterStateUpdated(function ($state, callable $set) {\n                                $set('postal_code_id', null);\n                            }),\n\n                        Select::make('postal_code_id')\n                            ->label('Postal Code')\n                            ->nullable()\n                            ->preload()\n                            ->reactive()\n                            ->options(function (callable $get) {\n                                $provinceId = $get('province_id');\n                                $cityId = $get('city_id');\n                                $districtId = $get('district_id');\n                                $subdistrictId = $get('subdistrict_id');\n                                return \\App\\Models\\PostalCode::where('province_id', $provinceId)\n                                    ->where('city_id', $cityId)\n                                    ->where('district_id', $districtId)\n                                    ->where('subdistrict_id', $subdistrictId)\n                                    ->pluck('postal_code', 'id');\n                            }),\n\n                        Select::make('user_id')\n                            ->label('User')\n                            ->hidden(fn () => !Auth::user()->hasRole('admin'))\n                            ->nullable()\n                            ->searchable()\n                            ->relationship('user', 'name')\n                    ])\n            ])\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $query = DeliveryAddress::query();\n\n        if (Auth::user()->hasRole('storage-staff')) {\n            $query->where('for', 3);\n        } elseif (Auth::user()->hasRole('sales')) {\n            $query->where('user_id', Auth::id());\n        } elseif (Auth::user()->hasRole('customer')) {\n            $query->where('user_id', Auth::id());\n        }\n\n        return $table\n            ->query($query)\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('for')\n                    ->hidden(fn () => !Auth::user()->hasRole('admin'))\n                    ->formatStateUsing(fn(string $state): string => match ($state) {\n                        '1' => 'Direct',\n                        '2' => 'Employee',\n                        '3' => 'Online',\n                    }),\n\n                TextColumn::make('name')\n                    ->searchable(),\n\n                TextColumn::make('recipient_name')\n                    ->searchable(),\n\n                TextColumn::make('recipient_telp_no')\n                    ->label('Telephone')\n                    ->searchable(),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('user.name')\n                    ->visible(fn ($record) => auth()->user()->hasRole('admin') || auth()->user()->hasRole('super_admin'))\n            ])\n            ->filters([\n                SelectFilter::make('for')\n                    ->hidden(fn () => !Auth::user()->hasRole('admin'))\n                    ->options([\n                        '1' => 'Direct',\n                        '2' => 'Employee',\n                        '3' => 'Online',\n                    ]),\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('created_at', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\SalesOrdersRelationManager::class\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListDeliveryAddresses::route('/'),\n            'create' => Pages\\CreateDeliveryAddress::route('/create'),\n            'view' => Pages\\ViewDeliveryAddress::route('/{record}'),\n            'edit' => Pages\\EditDeliveryAddress::route('/{record}/edit'),\n        ];\n    }\n\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\DeliveryAddress;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\DeliveryAddressResource\\RelationManagers;\n\nclass DeliveryAddressResource extends Resource\n{\n    protected static ?string $model = DeliveryAddress::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.deliveryAddresses.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    TextInput::make('name')\n                        ->required()\n                        ->string()\n                        ->autofocus(),\n\n                    TextInput::make('recipients_name')\n                        ->required()\n                        ->string(),\n\n                    TextInput::make('recipients_telp_no')\n                        ->nullable()\n                        ->string(),\n\n                    TextInput::make('address')\n                        ->required()\n                        ->string(),\n\n                    Select::make('province_id')\n                        ->required()\n                        ->relationship('province', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('city_id')\n                        ->required()\n                        ->relationship('city', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('district_id')\n                        ->required()\n                        ->relationship('district', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('subdistrict_id')\n                        ->required()\n                        ->relationship('subdistrict', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('postal_code_id')\n                        ->required()\n                        ->relationship('postalCode', 'id')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('latitude')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('longitude')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('for')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('user_id')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('name'),\n\n                TextColumn::make('recipients_name'),\n\n                TextColumn::make('recipients_telp_no'),\n\n                TextColumn::make('address'),\n\n                TextColumn::make('province.name'),\n\n                TextColumn::make('city.name'),\n\n                TextColumn::make('district.name'),\n\n                TextColumn::make('subdistrict.name'),\n\n                TextColumn::make('postalCode.id'),\n\n                TextColumn::make('latitude'),\n\n                TextColumn::make('longitude'),\n\n                TextColumn::make('for'),\n\n                TextColumn::make('user_id'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListDeliveryAddresses::route('/'),\n            'create' => Pages\\CreateDeliveryAddress::route('/create'),\n            'view' => Pages\\ViewDeliveryAddress::route('/{record}'),\n            'edit' => Pages\\EditDeliveryAddress::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}