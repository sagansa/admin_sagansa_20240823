{
    "conflicts": [
        {
            "id": "323ab560-8b7d-41ed-bbd8-078f2e10d1a0",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\HRD;\nuse App\\Filament\\Columns\\ImageOpenUrlColumn;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse App\\Models\\Presence;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse App\\Filament\\Resources\\Panel\\PresenceResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\PresenceResource\\RelationManagers;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Helpers\\ImageHelper;\nuse Filament\\Tables\\Columns\\ImageColumn;\n\nclass PresenceResource extends Resource\n{\n    protected static ?string $model = Presence::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $cluster = HRD::class;\n\n    protected static ?string $navigationGroup = 'Personal Data';\n\n    protected static ?string $pluralLabel = 'Presence';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.presences.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.presences.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.presences.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'nickname')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('shift_store_id')\n                        ->required()\n                        ->relationship('shiftStore', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->options([\n                            '1' => 'belum diperiksa',\n                            '2' => 'valid',\n                            '3' => 'tidak valid',\n                        ]),\n\n                    DateTimePicker::make('check_in')\n                        ->required()\n                        ->native(false),\n\n                    DateTimePicker::make('check_out')\n                        ->nullable()\n                        ->native(false),\n\n                    Select::make('created_by_id')\n                        ->label('For')\n                        ->nullable()\n                        ->relationship('createdBy', 'name')\n                        ->searchable()\n                        ->disabled()\n                        ->preload()\n                        ->native(false),\n\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $presence = Presence::query();\n\n        if (!Auth::user()->hasRole('admin')) {\n            $presence->where('created_by_id', Auth::id());\n        }\n        return $table\n            ->query($presence)\n            ->poll('60s')\n            ->columns([\n\n                // ImageOpenUrlColumn::make('image_in')\n                //     ->visibility('public')\n                //     ->url(fn($record) => ImageHelper::getImageUrl($record->image_in)),\n\n                ImageColumn::make('image_in')\n                    ->openUrlInNewTab()\n                    ->visibility('public')\n                    ->state(fn($record) => ImageHelper::getImageUrl($record->image_in))\n                    ->url(fn($record) => ImageHelper::getImageUrl($record->image_in)),\n\n                ImageOpenUrlColumn::make('image_out')\n                    ->visibility('public')\n                    ->url(fn($record) => ImageHelper::getImageUrl($record->image_out)),\n\n                TextColumn::make('createdBy.name')\n                    ->sortable(),\n\n                TextColumn::make('store.nickname')\n                    ->sortable(),\n\n                TextColumn::make('shiftStore.name'),\n\n                TextColumn::make('status')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'belum diperiksa',\n                            '2' => 'valid',\n                            '3' => 'tidak valid',\n\n                            default => $state,\n                        }\n                    )\n                    ->badge()\n                    ->color(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'warning',\n                            '2' => 'success',\n                            '3' => 'danger',\n                            default => $state,\n                        }\n                    ),\n\n                TextColumn::make('check_in'),\n\n                TextColumn::make('check_out'),\n            ])\n            ->filters([\n                SelectFilter::make('created_by_id')\n                    ->label('Created By')\n                    ->searchable()\n                    ->relationship('createdBy', 'name'),\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListPresences::route('/'),\n            'create' => Pages\\CreatePresence::route('/create'),\n            'view' => Pages\\ViewPresence::route('/{record}'),\n            'edit' => Pages\\EditPresence::route('/{record}/edit'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse App\\Models\\Presence;\nuse Filament\\Tables\\Table;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DateTimePicker;\nuse App\\Filament\\Resources\\Panel\\PresenceResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\PresenceResource\\RelationManagers;\n\nclass PresenceResource extends Resource\n{\n    protected static ?string $model = Presence::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.presences.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.presences.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.presences.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('shift_store_id')\n                        ->required()\n                        ->relationship('shiftStore', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('status')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('image_in')\n                        ->nullable()\n                        ->string(),\n\n                    DateTimePicker::make('start_date_time')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('latitude_in')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('longitude_in')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('image_out')\n                        ->nullable()\n                        ->string(),\n\n                    DateTimePicker::make('end_date_time')\n                        ->rules(['date'])\n                        ->nullable()\n                        ->native(false),\n\n                    TextInput::make('latitude_out')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('longitude_out')\n                        ->nullable()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('created_by_id')\n                        ->nullable()\n                        ->relationship('createdBy', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('approved_by_id')\n                        ->nullable()\n                        ->relationship('approvedBy', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('store.name'),\n\n                TextColumn::make('shiftStore.name'),\n\n                TextColumn::make('status'),\n\n                TextColumn::make('image_in'),\n\n                TextColumn::make('start_date_time')->since(),\n\n                TextColumn::make('latitude_in'),\n\n                TextColumn::make('longitude_in'),\n\n                TextColumn::make('image_out'),\n\n                TextColumn::make('end_date_time')->since(),\n\n                TextColumn::make('latitude_out'),\n\n                TextColumn::make('longitude_out'),\n\n                TextColumn::make('createdBy.name'),\n\n                TextColumn::make('approvedBy.name'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListPresences::route('/'),\n            'create' => Pages\\CreatePresence::route('/create'),\n            'view' => Pages\\ViewPresence::route('/{record}'),\n            'edit' => Pages\\EditPresence::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}