{
    "conflicts": [
        {
            "id": "e51a27c0-8d88-4c8f-9f63-2842033af7b3",
            "currentContent": "<?php\n\nnamespace App\\Http\\Controllers\\api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Models\\Employee;\nuse App\\Models\\PermitEmployee;\nuse App\\Models\\Presence;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Carbon;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Illuminate\\Support\\Facades\\Validator;\n\nclass PresenceController extends Controller\n{\n    public function getPresenceToday()\n    {\n        $userId = Auth::user()->id;\n        $today = now()->toDateString();\n        $currentMonth = now()->month;\n\n        $presenceToday = Presence::select('start_date_time', 'end_date_time')\n                                ->where('created_by_id', $userId)\n                                ->whereDate('created_at', $today)\n                                ->first();\n\n        $presenceThisMonth = Presence::select('start_date_time', 'end_date_time', 'created_at')\n                                ->where('created_by_id', $userId)\n                                ->whereMonth('created_at', $currentMonth)\n                                ->get()\n                                ->map(function ($attendance) {\n                                    return [\n                                        'start_date_time' => $attendance->start_date_time,\n                                        'end_date_time' => $attendance->end_date_time,\n                                        'date' => $attendance->created_at->toDateString()\n                                    ];\n                                });\n\n        return response()->json([\n            'success' => true,\n            'data' => [\n                'today' => $presenceToday,\n                'this_month' => $presenceThisMonth\n            ],\n            'message' => 'Success get attendance today'\n        ]);\n    }\n\n    public function getEmployee()\n    {\n        // $schedule = Schedule::with(['office', 'shift'])\n        //                 ->where('user_id', auth()->user()->id)\n        //                 ->first();\n\n        $employee = Employee::where('user_id', Auth::user()->id)->first();\n\n        $today = Carbon::today()->format('Y-m-d');\n        $approvedLeave = PermitEmployee::where('created_by_id', Auth::user()->id)\n                            ->where('status', '2')\n                            ->whereDate('from_date', '<=', $today)\n                            ->whereDate('until_date', '>=', $today)\n                            ->exists();\n\n        if ($approvedLeave) {\n            return response()->json([\n                'success' => true,\n                'message' => 'Anda tidak dapat melakukan presensi karena sedang cuti',\n                'data' => null\n            ]);\n        }\n\n        if ($employee->is_banned) {\n            return response()->json([\n                'success' => false,\n                'message' => 'You are banned',\n                'data' => null\n            ]);\n        } else {\n            return response()->json([\n                'success' => true,\n                'message' => 'Success get schedule',\n                'data' => $employee\n            ]);\n        }\n\n    }\n\n    public function store(Request $request)\n    {\n        $validator = Validator::make($request->all(), [\n            'store_id' => 'required',\n            'shift_store_id' => 'required',\n            'store_start_latitude' => 'required|numeric',\n            'store_start_longitude' => 'required|numeric',\n            'shift_start_time' => 'required',\n            'shift_end_time' => 'required',\n            'start_latitude' => 'required|numeric',\n            'start_longitude' => 'required|numeric',\n\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json([\n                'success' => false,\n                'message' => 'Validation error',\n                'data' => $validator->errors()\n            ], 422);\n        }\n\n        $presence = Presence::where('created_by_id', Auth::user()->id)\n                            ->whereDate('created_at', date('Y-m-d'))->first();\n\n        if (!$presence) {\n            $presence = Presence::create([\n                'created_by_id' => Auth::user()->id, // ok\n                'store_id' => $request->store_id, // ok\n                'shift_store_id' => $request->shift_store_id, // ok\n                'status' => 1,\n                'store_start_latitude' => $request->store_start_latitude, // ok\n                'store_start_longitude' => $request->store_start_longitude, // ok\n                'shift_start_time' => $request->shift_start_time, // ok\n                'shift_end_time' => $request->shift_end_time, // ok\n                'start_latitude' => $request->start_latitude, // ok\n                'start_longitude' => $request->start_longitude, // ok\n                'start_date_time' => Carbon::now(), // ok\n            ]);\n        } else {\n            $presence->update([\n                'store_end_latitude' => $request->store_end_latitude,\n                'store_end_longitude' => $request->store_end_longitude,\n\n                'end_latitude' => $request->end_latitude,\n                'end_longitude' => $request->end_longitude,\n                'end_date_time' => Carbon::now(),\n            ]);\n        }\n\n        return response()->json([\n            'success' => true,\n            'message' => 'Success presence',\n            'data' => $presence\n        ]);\n    }\n\n    public function getPresenceByMonthYear($month, $year)\n    {\n        $validator = Validator::make(['month' => $month, 'year' => $year], [\n            'month' => 'required|integer|between:1,12',\n            'year' => 'required|integer|min:2023|max:'.date('Y')\n        ]);\n\n        if ($validator->fails()) {\n            return response()->json([\n                'success' => false,\n                'message' => 'Validation error',\n                'data' => $validator->errors()\n            ], 422);\n        }\n\n        $userId = Auth::user()->id;\n        $presenceList = Presence::select('start_date_time', 'end_date_time', 'created_at')\n                                ->where('created_by_id', $userId)\n                                ->whereMonth('created_at', $month)\n                                ->whereYear('created_at', $year)\n                                ->get()\n                                ->map(function ($presence) {\n                                    return [\n                                        'start_date_time' => $presence->start_date_time,\n                                        'end_date_time' => $presence->end_date_time,\n                                        'date' => $presence->created_at->toDateString()\n                                    ];\n                                });\n\n        return response()->json([\n            'success' => true,\n            'data' => $presenceList,\n            'message' => 'Success get attendance by month and year'\n        ]);\n\n    }\n\n    public function banned()\n    {\n        $schedule = Employee::where('user_id', Auth::user()->id)->first();\n        if ($schedule) {\n            $schedule->update([\n                'is_banned' => true\n            ]);\n        }\n\n        return response()->json([\n            'success' => true,\n            'message' => 'Success banned schedule',\n            'data' => $schedule\n        ]);\n    }\n\n    public function getImage()\n    {\n        $user = Auth::user();\n        return response()->json([\n            'success' => true,\n            'message' => 'Success get image',\n            'data' => $user->image_url\n        ]);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Models\\Presence;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Resources\\PresenceResource;\nuse App\\Http\\Resources\\PresenceCollection;\nuse App\\Http\\Requests\\PresenceStoreRequest;\nuse App\\Http\\Requests\\PresenceUpdateRequest;\n\nclass PresenceController extends Controller\n{\n    public function index(Request $request): PresenceCollection\n    {\n        $search = $request->get('search', '');\n\n        $presences = $this->getSearchQuery($search)\n            ->latest()\n            ->paginate();\n\n        return new PresenceCollection($presences);\n    }\n\n    public function store(PresenceStoreRequest $request): PresenceResource\n    {\n        $validated = $request->validated();\n\n        $presence = Presence::create($validated);\n\n        return new PresenceResource($presence);\n    }\n\n    public function show(Request $request, Presence $presence): PresenceResource\n    {\n        return new PresenceResource($presence);\n    }\n\n    public function update(\n        PresenceUpdateRequest $request,\n        Presence $presence\n    ): PresenceResource {\n        $validated = $request->validated();\n\n        $presence->update($validated);\n\n        return new PresenceResource($presence);\n    }\n\n    public function destroy(Request $request, Presence $presence): Response\n    {\n        $presence->delete();\n\n        return response()->noContent();\n    }\n\n    public function getSearchQuery(string $search)\n    {\n        return Presence::query()->where('image_in', 'like', \"%{$search}%\");\n    }\n}\n"
        }
    ]
}