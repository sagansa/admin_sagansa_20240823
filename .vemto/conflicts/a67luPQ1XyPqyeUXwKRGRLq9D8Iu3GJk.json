{
    "conflicts": [
        {
            "id": "a74fe6f1-19be-4e16-a6e9-fac69b40c2af",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\n\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Tables\\DailySalaryTable;\nuse App\\Filament\\Forms\\StatusInput;\nuse App\\Filament\\Forms\\StoreSelect;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource;\nuse Filament\\Actions\\CreateAction;\nuse Illuminate\\Database\\Eloquent\\Model;\n\nclass DailySalariesRelationManager extends RelationManager\n{\n    protected static string $relationship = 'dailySalaries';\n\n    protected static ?string $recordTitleAttribute = 'date';\n\n    public function form(Form $form): Form\n    {\n        return $form->schema([\n            Grid::make(['default' => 1])->schema([\n                StoreSelect::make('store_id')\n                    ->required(),\n\n                Select::make('shift_store_id')\n                    ->required()\n                    ->relationship('shiftStore', 'name')\n                    ->preload(),\n\n                DateInput::make('date'),\n\n                TextInput::make('amount')\n                    ->required()\n                    ->numeric()\n                    ->step(1),\n\n                Select::make('payment_type_id')\n                    ->required()\n                    ->relationship('paymentType', 'name')\n                    ->preload(),\n\n                Select::make('status')\n                    ->options([\n                        '1' => 'belum diperiksa',\n                        '2' => 'siap dibayar',\n                        '3' => 'dibayar',\n                        '4' => 'tidak valid'\n                    ])\n                    ->required()\n                    ->preload(),\n\n                Select::make('created_by_id')\n                    ->relationship('createdBy', 'name')\n                    ->nullable()\n                    ->searchable()\n                    ->preload(),\n            ]),\n        ]);\n    }\n\n    public function table(Table $table): Table\n    {\n        return $table\n\n            ->columns(\n                DailySalaryTable::schema()\n            )\n\n            ->filters([])\n            ->headerActions([\n                // Tables\\Actions\\CreateAction::make(),\n\n                // Tables\\Actions\\AttachAction::make()->form(\n                //     fn(Tables\\Actions\\AttachAction $action): array => [\n                //         $action->getRecordSelect()->preload(),\n                //         // TextInput::make('name')\n                //     ]\n                // )->multiple(),\n\n                // Tables\\Actions\\AttachAction::make()->preloadRecordSelect()->multiple(),\n                // TextInput::make('amount')\n\n                // Tables\\Actions\\AttachAction::make()\n                //     ->recordSelect(\n                //         fn (Select $select) => $select->placeholder('Select a post'),\n                //     )\n            ])\n            ->actions([\n                // Tables\\Actions\\EditAction::make(),\n                // Tables\\Actions\\DeleteAction::make(),\n                Tables\\Actions\\DetachAction::make()\n                    ->action(function ($record) {\n                        $record->pivot->delete();\n                        $record->update(['status' => 3]);\n                    }),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    // Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\DetachBulkAction::make()\n                        ->action(function ($records) {\n                            foreach ($records as $record) {\n                                $record->paymentReceipts()->detach();\n                                $record->update(['status' => 3]);\n                            }\n                        }),\n                ]),\n            ]);\n    }\n\n    public static function canViewForRecord(Model $ownerRecord, string $pageClass): bool\n    {\n        return $ownerRecord->payment_for === 2;\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Resources\\RelationManagers\\RelationManager;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource;\n\nclass DailySalariesRelationManager extends RelationManager\n{\n    protected static string $relationship = 'dailySalaries';\n\n    protected static ?string $recordTitleAttribute = 'date';\n\n    public function form(Form $form): Form\n    {\n        return $form->schema([\n            Grid::make(['default' => 1])->schema([\n                Select::make('store_id')\n                    ->required()\n                    ->relationship('store', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                Select::make('shift_store_id')\n                    ->required()\n                    ->relationship('shiftStore', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n\n                DatePicker::make('date')\n                    ->rules(['date'])\n                    ->required()\n                    ->native(false),\n\n                TextInput::make('amount')\n                    ->required()\n                    ->numeric()\n                    ->step(1),\n\n                Select::make('payment_type_id')\n                    ->required()\n                    ->relationship('paymentType', 'name')\n                    ->searchable()\n                    ->preload()\n                    ->native(false),\n            ]),\n        ]);\n    }\n\n    public function table(Table $table): Table\n    {\n        return $table\n            ->columns([\n                TextColumn::make('store.name'),\n\n                TextColumn::make('shiftStore.name'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('amount'),\n\n                TextColumn::make('paymentType.name'),\n\n                TextColumn::make('created_by_id'),\n\n                TextColumn::make('createdBy.name'),\n\n                TextColumn::make('status'),\n            ])\n            ->filters([])\n            ->headerActions([\n                Tables\\Actions\\CreateAction::make(),\n\n                Tables\\Actions\\AttachAction::make()->form(\n                    fn(Tables\\Actions\\AttachAction $action): array => [\n                        $action->getRecordSelect(),\n                    ]\n                ),\n            ])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\DeleteAction::make(),\n                Tables\\Actions\\DetachAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n\n                    Tables\\Actions\\DetachBulkAction::make(),\n                ]),\n            ]);\n    }\n}\n"
        }
    ]
}