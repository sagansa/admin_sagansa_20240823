{
    "conflicts": [
        {
            "id": "709fcd79-249e-416d-bbf6-adf4054030c1",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Closings;\nuse App\\Filament\\Columns\\CurrencyColumn;\nuse App\\Filament\\Columns\\StatusColumn;\nuse App\\Filament\\Filters\\DateFilter;\nuse App\\Filament\\Filters\\SelectStoreFilter;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\Notes;\nuse App\\Filament\\Forms\\StoreSelect;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\ClosingStore;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse App\\Filament\\Resources\\Panel\\ClosingStoreResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ClosingStoreResource\\RelationManagers;\nuse App\\Models\\DailySalary;\nuse App\\Models\\FuelService;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Illuminate\\Support\\Facades\\Auth;\nuse App\\Models\\AccountCashless;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nclass ClosingStoreResource extends Resource\n{\n    protected static ?string $model = ClosingStore::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Closing';\n\n    protected static ?string $pluralLabel = 'Store';\n\n    protected static ?string $cluster = Closings::class;\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.closingStores.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.closingStores.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.closingStores.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    StoreSelect::make('store_id'),\n\n                    Select::make('shift_store_id')\n                        ->required()\n                        ->relationship('shiftStore', 'name')\n                        ->preload()\n                        ->native(false),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->default('today')\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('cash_from_yesterday')\n                        ->prefix('Rp')\n                        ->required()\n                        ->reactive()\n                        ->debounce(2000)\n                        ->minValue(0)\n                        ->numeric()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('cash_for_tomorrow')\n                        ->prefix('Rp')\n                        ->required()\n                        ->reactive()\n                        ->debounce(2000)\n                        ->minValue(0)\n                        ->numeric()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('total_cash_transfer')\n                        ->prefix('Rp')\n                        ->required()\n                        ->reactive()\n                        ->debounce(2000)\n                        ->minValue(0)\n                        ->numeric()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n                ]),\n            ]),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('fuelServices')\n                        ->multiple()\n                        ->relationship(\n                            name: 'fuelServices',\n                            modifyQueryUsing: fn (Builder $query, $get) => $query\n                                ->where('payment_type_id', '2')\n                                ->where('status', '1')\n                                ->whereDate('date', '>=', now()->subDays(10)) // add this line\n                                ->orderBy('date', 'desc')\n                        )\n                        ->getOptionLabelFromRecordUsing(fn (FuelService $record) => \"{$record->fuel_service_name}\")\n                        ->preload()\n                        ->reactive()\n                        ->native(false)\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                            self::updateFuelServiceStatus($get, $set);\n                        }),\n\n                    Select::make('dailySalaries')\n                        ->multiple()\n                        ->relationship(\n                            name: 'dailySalaries',\n                            modifyQueryUsing: fn (Builder $query, $get) => $query\n                                ->where('payment_type_id', '2')\n                                ->where('status', '1')\n                                ->when($get('store_id'), fn ($query, $storeId) => $query->where('store_id', $storeId)) // Menggunakan store_id yang dipilih\n                                ->whereDate('date', '>=', now()->subDays(10)) // add this line\n                                ->orderBy('date', 'desc')\n                        )\n                        ->getOptionLabelFromRecordUsing(fn (DailySalary $record) => \"{$record->daily_salary_name}\")\n                        ->preload()\n                        ->reactive()\n                        ->native(false)\n                        ->afterStateUpdated(function (Get $get, Set $set, $state) {\n                            self::updateDailySalaryStatus($state, $set);\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    Select::make('invoicePurchases')\n                        ->multiple()\n                        ->relationship(\n                            name: 'invoicePurchases',\n                            modifyQueryUsing: fn (Builder $query, $get) => $query\n                                ->where('payment_type_id', '2')\n                                ->where('payment_status', '1')\n                                ->when($get('store_id'), fn ($query, $storeId) => $query->where('store_id', $storeId)) // Menggunakan store_id yang dipilih\n                                ->whereDate('date', '>=', now()->subDays(10)) // add this line\n                                ->orderBy('date','desc')\n                        )\n                        ->getOptionLabelFromRecordUsing(fn (InvoicePurchase $record) => \"{$record->invoice_purchase_name}\")\n                        ->preload()\n                        ->reactive()\n                        ->native(false)\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                            self::updateInvoicePurchaseStatus($get, $set);\n                        }),\n\n                ])\n            ]),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Repeater::make('cashlesses')\n                        ->relationship()\n                        ->schema([\n                            Select::make('account_cashless_id')\n                                ->required()\n                                ->native(false)\n                                ->preload()\n                                ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                                ->relationship(\n                                    name: 'accountCashless',\n                                    modifyQueryUsing: function (Builder $query, callable $get) {\n                                        $storeId = $get('../../store_id');\n                                        $query->where('store_id', $storeId);\n\n                                        return $query;\n                                    }\n                                )\n                                ->getOptionLabelFromRecordUsing(fn (AccountCashless $record) => $record->account_cashless_name),\n\n                            TextInput::make('bruto_apl')\n                                ->label('Bruto Total Omzet')\n                                ->prefix('Rp')\n                                ->required()\n                                ->numeric(),\n\n                            ImageInput::make('image')\n                                ->disk('public')\n                                ->directory('images/ClosingStore'),\n                        ])\n\n                ])\n            ]),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n\n                    TextInput::make('total_fuel_service')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('total_daily_salary')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('total_invoice_purchase')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('spending_total_cash')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('total_cash')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('total_cashless')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    TextInput::make('total_omzet')\n                        ->prefix('Rp')\n                        ->disabled()\n                        ->afterStateUpdated(function (Get $get, Set $set) {\n                            self::updateTotalOmzet($get, $set);\n                        }),\n\n                    Select::make('transfer_by_id')\n                        ->nullable()\n                        // ->required(function ($request) {\n                        //     return $request->total_cash_transfer != 0;\n                        // })\n                        ->relationship('transferBy', 'name')\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->hidden(fn ($operation) => $operation === 'create')\n                        ->disabled(fn () => Auth::user()->hasRole('staff'))\n                        ->required(fn () => Auth::user()->hasRole('admin'))\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'belum diperiksa',\n                            '2' => 'valid',\n                            '3' => 'diperbaiki',\n                            '4' => 'periksa ulang',\n                        ]),\n\n                    Notes::make('notes'),\n                ])\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $query = ClosingStore::query();\n\n        if (!Auth::user()->hasRole('admin')) {\n            $query->where('created_by_id', Auth::id());\n        }\n\n        return $table\n            ->query($query)\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('store.nickname'),\n\n                TextColumn::make('shiftStore.name')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                TextColumn::make('date')\n                    ->sortable(),\n\n                CurrencyColumn::make('cash_from_yesterday'),\n\n                CurrencyColumn::make('cash_for_tomorrow'),\n\n                CurrencyColumn::make('total_cash_transfer'),\n\n                TextColumn::make('createdBy.name')\n                    ->hidden(fn () => !Auth::user()->hasRole('admin')),\n\n                TextColumn::make('transferBy.name')\n                    ->toggleable(isToggledHiddenByDefault: true),\n\n                StatusColumn::make('status'),\n            ])\n            ->filters([\n                SelectStoreFilter::make('store_id'),\n                DateFilter::make('date'),\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                    Tables\\Actions\\BulkAction::make('setStatusToDiperbaiki')\n                        ->label('Set Status to Diperbaiki')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            ClosingStore::whereIn('id', $records->pluck('id'))->update(['status' => 3]);\n                        })\n                        ->color('warning'),\n                ]),\n            ])\n            ->defaultSort(fn (Builder $query) => $query->orderBy('date', 'desc')->orderBy('created_at', 'desc'));\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\CashlessesRelationManager::class,\n            RelationManagers\\InvoicePurchasesRelationManager::class,\n            RelationManagers\\DailySalariesRelationManager::class,\n            RelationManagers\\FuelServicesRelationManager::class,\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListClosingStores::route('/'),\n            'create' => Pages\\CreateClosingStore::route('/create'),\n            'view' => Pages\\ViewClosingStore::route('/{record}'),\n            'edit' => Pages\\EditClosingStore::route('/{record}/edit'),\n        ];\n    }\n\n    protected static function updateDailySalaryStatus($state, $set): void\n    {\n        foreach ($state as $dailySalaryId) {\n            $dailySalary = DailySalary::find($dailySalaryId);\n            if  ($dailySalary) {\n                $dailySalary->status = 2;\n                $dailySalary->save();\n            }\n        }\n    }\n\n    protected static function updateFuelServiceStatus($state, $set): void\n    {\n        foreach ($state as $fuelServiceId) {\n            $fuelService = FuelService::find($fuelServiceId);\n            if ($fuelService) {\n                $fuelService->status = 2;\n                $fuelService->save();\n            }\n        }\n    }\n\n    protected static function updateInvoicePurchaseStatus($state, $set): void\n    {\n        foreach ($state as $invoicePurchaseId) {\n            $invoicePurchase = InvoicePurchase::find($invoicePurchaseId);\n            if ($invoicePurchase) {\n                $invoicePurchase->status = 2;\n                $invoicePurchase->save();\n            }\n        }\n    }\n\n    protected static function updateTotalOmzet(Get $get, Set $set): void\n    {\n        $fuelServices = $get('fuelServices') ?? [];\n        $dailySalaries = $get('dailySalaries') ?? [];\n        $invoicePurchases = $get('invoicePurchases') ?? [];\n        $cashlesses = $get('cashlesses') ?? [];\n\n        // total fuel service\n        $totalFuelService = 0;\n        foreach ($fuelServices as $fuelServiceId) {\n            $fuelService = FuelService::find($fuelServiceId);\n            if ($fuelService) {\n                $totalFuelService += $fuelService->amount;\n            }\n        }\n        $set('total_fuel_service', $totalFuelService);\n\n        // total daily salary\n        $totalDailySalary = 0;\n        foreach ($dailySalaries as $dailySalaryId) {\n            $dailySalary = DailySalary::find($dailySalaryId);\n            if ($dailySalary) {\n                $totalDailySalary += $dailySalary->amount;\n            }\n        }\n        $set('total_daily_salary', $totalDailySalary);\n\n        // total invoice purchase\n        $totalInvoicePurchase = 0;\n        foreach ($invoicePurchases as $invoicePurchaseId) {\n            $invoicePurchase = InvoicePurchase::find($invoicePurchaseId);\n            if ($invoicePurchase) {\n                $totalInvoicePurchase += $invoicePurchase->total_price;\n            }\n        }\n        $set('total_invoice_purchase', $totalInvoicePurchase);\n\n        // total cashless\n        $totalCashless = 0;\n        foreach ($cashlesses as $cashless) {\n            if (isset($cashless['bruto_apl'])) {\n                $totalCashless += (int) $cashless['bruto_apl'];\n            }\n        }\n        $set('total_cashless', $totalCashless);\n\n        $spendingTotalCash = $totalFuelService + $totalDailySalary + $totalInvoicePurchase;\n        $set('spending_total_cash', $spendingTotalCash);\n\n        $cashForTomorrow = $get('cash_for_tomorrow') ?? 0;\n        $cashFromYesterday = $get('cash_from_yesterday') ?? 0;\n        $totalCashTransfer = $get('total_cash_transfer') ?? 0;\n\n        // total cash\n        $totalCash = floatval($cashForTomorrow) - floatval($cashFromYesterday) + floatval($spendingTotalCash) + floatval($totalCashTransfer);\n        $set('total_cash', $totalCash);\n\n        // total omzet\n        $totalOmzet = $totalCash + $totalCashless;\n        $set('total_omzet', $totalOmzet);\n    }\n\n}\n\n// spending_cash_total = fuelService + dailySalary + invoicePurchase\n// penjumlahan cashless bruto_apl = cashless_total\n// cash_total = cash_for_tomorrow - cash_from_yesterday + spending_cash_total + total_cash_transfer\n// omzet = cash_total + cashless_total\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\ClosingStore;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\ClosingStoreResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\ClosingStoreResource\\RelationManagers;\n\nclass ClosingStoreResource extends Resource\n{\n    protected static ?string $model = ClosingStore::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Cash';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.closingStores.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.closingStores.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.closingStores.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('shift_store_id')\n                        ->required()\n                        ->relationship('shiftStore', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('cash_from_yesterday')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('cash_for_tomorrow')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('total_cash_transfer')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n\n                    Select::make('created_by_id')\n                        ->nullable()\n                        ->relationship('createdBy', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('approved_by_id')\n                        ->nullable()\n                        ->relationship('transferBy', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('transfer_by_id')\n                        ->nullable()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'belum diperiksa',\n                            '2' => 'valid',\n                            '3' => 'diperbaiki',\n                            '4' => 'periksa ulang',\n                        ]),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('store.name'),\n\n                TextColumn::make('shiftStore.name'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('cash_from_yesterday'),\n\n                TextColumn::make('cash_for_tomorrow'),\n\n                TextColumn::make('total_cash_transfer'),\n\n                TextColumn::make('notes')->limit(255),\n\n                TextColumn::make('createdBy.name'),\n\n                TextColumn::make('transferBy.name'),\n\n                TextColumn::make('transfer_by_id'),\n\n                TextColumn::make('status'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\CashlessesRelationManager::class,\n            RelationManagers\\InvoicePurchasesRelationManager::class,\n            RelationManagers\\DailySalariesRelationManager::class,\n            RelationManagers\\FuelServicesRelationManager::class,\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListClosingStores::route('/'),\n            'create' => Pages\\CreateClosingStore::route('/create'),\n            'view' => Pages\\ViewClosingStore::route('/{record}'),\n            'edit' => Pages\\EditClosingStore::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}