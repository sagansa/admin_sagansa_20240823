{
    "conflicts": [
        {
            "id": "24876660-2687-434a-86df-64ebba794d8d",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Purchases;\nuse App\\Filament\\Columns\\CurrencyColumn;\nuse App\\Filament\\Columns\\ImageOpenUrlColumn;\nuse App\\Filament\\Columns\\SupplierColumn;\nuse App\\Filament\\Forms\\CurrencyInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\Notes;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\PaymentReceipt;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\nuse App\\Models\\DailySalary;\nuse App\\Models\\FuelService;\nuse App\\Models\\InvoicePurchase;\nuse App\\Models\\Supplier;\nuse Filament\\Forms\\Components\\Radio;\nuse Filament\\Resources\\RelationManagers\\RelationGroup;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass PaymentReceiptResource extends Resource\n{\n    protected static ?string $model = PaymentReceipt::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $cluster = Purchases::class;\n\n    // protected static ?string $navigationGroup = 'Purchase';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.paymentReceipts.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n\n                    Radio::make('payment_for')\n                        ->disabled(fn($operation) => $operation === 'edit')\n                        ->options([\n                            '1' => 'fuel/service',\n                            '2' => 'daily salary',\n                            '3' => 'invoice',\n                        ])\n                        ->inline()\n                        ->reactive(),\n\n                    Select::make('fuelServices')\n                        ->visible(fn($get) => $get('payment_for') == '1')\n                        ->required(fn($get) => $get('payment_for') == '1' && fn($operation) => $operation === 'create')\n                        ->hidden(fn($operation) => $operation === 'edit' || $operation === 'view')\n                        ->multiple()\n                        ->relationship(\n                            name: 'fuelServices',\n                            modifyQueryUsing: fn(Builder $query) => $query\n                                ->where('payment_type_id', '1')\n                                ->where('status', '1')\n                                ->orderBy('date', 'desc')\n                        )\n                        ->getOptionLabelFromRecordUsing(fn(FuelService $record) => \"{$record->fuel_service_name}\")\n                        ->preload(),\n                    // ->reactive()\n                    // ->afterStateUpdated(function ($state, $set) {\n                    //     $totalAmount = 0;\n                    //     foreach ($state as $fuelServiceId) {\n                    //         $fuelService = FuelService::find($fuelServiceId);\n                    //         if ($fuelService) {\n                    //             $totalAmount += $fuelService->amount;\n                    //         }\n                    //     }\n                    //     $set('total_amount', $totalAmount);\n                    // }),\n\n                    Select::make('dailySalaries')\n                        ->visible(fn($get) => $get('payment_for') == '2')\n                        ->required(fn($get) => $get('payment_for') == '2' && fn($operation) => $operation === 'create')\n                        ->hidden(fn($operation) => $operation === 'edit' || $operation === 'view')\n                        ->multiple()\n                        ->relationship(\n                            name: 'dailySalaries',\n                            modifyQueryUsing: fn(Builder $query) => $query\n                                ->where('payment_type_id', '1')\n                                ->where('status', '3')\n                                ->orderBy('date', 'desc')\n                        )\n                        ->getOptionLabelFromRecordUsing(fn(DailySalary $record) => \"{$record->daily_salary_name}\")\n                        ->preload(),\n                    // ->reactive()\n                    // ->afterStateUpdated(function ($state, $set) {\n                    //     $totalAmount = 0;\n                    //     foreach ($state as $dailySalaryId) {\n                    //         $dailySalary = DailySalary::find($dailySalaryId);\n                    //         if ($dailySalary) {\n                    //             // $dailySalary->status = 2;\n                    //             // $dailySalary->save();\n                    //             $totalAmount += $dailySalary->amount;\n                    //         }\n                    //     }\n                    //     $set('total_amount', $totalAmount);\n                    // }),\n\n                    Select::make('user_id')\n                        ->label('Employee')\n                        ->visible(fn($get) => $get('payment_for') == '2')\n                        ->required(fn($get) => $get('payment_for') == '2')\n                        ->relationship('user', 'name', fn(Builder $query) => $query\n                            ->whereHas('roles', fn(Builder $query) => $query\n                                ->where('name', 'staff') || $query\n                                ->where('name', 'supervisor'))->orderBy('name', 'asc'))\n                        ->searchable()\n                        ->preload(),\n\n                    Select::make('invoicePurchases')\n                        ->visible(fn($get) => $get('payment_for') == '3')\n                        ->required(fn($get) => $get('payment_for') == '3' && fn($operation) => $operation === 'create')\n                        ->hidden(fn($operation) => $operation === 'edit' || $operation === 'view')\n                        ->multiple()\n                        ->relationship(\n                            name: 'invoicePurchases',\n                            modifyQueryUsing: fn(Builder $query) => $query\n                                ->where('payment_type_id', '1')\n                                ->where('payment_status', '1')\n                                ->orderBy('date', 'desc')\n                        )\n                        // ->relationship(\n                        //     name: 'invoicePurchases',\n                        //     modifyQueryUsing: fn(Builder $query) => $query\n                        //         ->where('payment_type_id', '1')\n                        //         ->where(function ($query) {\n                        //             $query->where('payment_status', '1')\n                        //                 ->orWhere(function ($subQuery) {\n                        //                     $subQuery->where('payment_status', '2')\n                        //                         ->whereExists(function ($existsQuery) {\n                        //                             $existsQuery->selectRaw(1)\n                        //                                 ->from('invoice_purchase_payment_receipt')\n                        //                                 ->whereColumn('invoice_purchase_payment_receipt.invoice_purchase_id', '=', 'invoice_purchases.id');\n                        //                         });\n                        //                 });\n                        //         })\n                        //         ->orderBy('date', 'desc')\n                        // )\n                        ->getOptionLabelFromRecordUsing(fn(InvoicePurchase $record) => \"{$record->invoice_purchase_name}\")\n                        ->preload()\n                        ->searchable(),\n                    // ->reactive()\n                    // ->afterStateUpdated(function ($state, $set) {\n                    //     $totalAmount = 0;\n                    //     foreach ($state as $invoicePurchaseId) {\n                    //         $invoicePurchase = InvoicePurchase::find($invoicePurchaseId);\n                    //         if ($invoicePurchase) {\n                    //             $totalAmount += $invoicePurchase->total_price;\n                    //         }\n                    //     }\n                    //     $set('total_amount', $totalAmount);\n                    // }),\n\n                    Select::make('supplier_id')\n                        ->label(__('crud.suppliers.itemTitle'))\n                        ->visible(fn($get) => $get('payment_for') == '3' || $get('payment_for') == '1')\n                        ->required(fn($get) => $get('payment_for') == '3' || $get('payment_for') == '1')\n                        ->relationship(\n                            name: 'supplier',\n                            modifyQueryUsing: fn(Builder $query) => $query->where('status', '<>', '3')->orderBy('name', 'asc'),\n                        )\n                        ->getOptionLabelFromRecordUsing(fn(Supplier $record) => \"{$record->supplier_name}\")\n                        ->searchable()\n                        ->preload(),\n                ]),\n            ]),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n\n                    CurrencyInput::make('transfer_amount'),\n\n                    // CurrencyInput::make('total_amount')->readOnly(),\n\n                    ImageInput::make('image')\n                        ->directory('images/PaymentReceipt'),\n\n                    ImageInput::make('image_adjust')\n                        ->directory('images/PaymentReceipt')\n                        ->hidden(fn($operation) => $operation === 'create'),\n\n                    Notes::make('notes')\n                        ->hidden(fn($operation) => $operation === 'create'),\n\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $paymentReceipt = PaymentReceipt::query();\n\n        if (Auth::user()->hasRole('staff') || Auth::user()->hasRole('supervisor')) {\n            $paymentReceipt->where('payment_for', '<>', 2);\n        }\n\n        return $table\n            ->query($paymentReceipt)\n            ->poll('60s')\n            ->columns([\n                ImageOpenUrlColumn::make('image')\n                    ->label('Payment')\n                    ->visibility('public')\n                    ->url(fn($record) => asset('storage/' . $record->image)),\n\n                ImageOpenUrlColumn::make('image_adjust')\n                    ->label('Adjust')\n                    ->visibility('public')\n                    ->url(fn($record) => asset('storage/' . $record->image_adjust)),\n\n                SupplierColumn::make('Supplier'),\n\n                TextColumn::make('created_at')\n                    ->date(),\n\n                CurrencyColumn::make('transfer_amount'),\n\n            ])\n\n            ->filters([])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('created_at', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationGroup::make('Contacts', [\n                RelationManagers\\FuelServicesRelationManager::class,\n                RelationManagers\\DailySalariesRelationManager::class,\n                RelationManagers\\InvoicePurchasesRelationManager::class,\n            ])\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListPaymentReceipts::route('/'),\n            'create' => Pages\\CreatePaymentReceipt::route('/create'),\n            'view' => Pages\\ViewPaymentReceipt::route('/{record}'),\n            'edit' => Pages\\EditPaymentReceipt::route('/{record}/edit'),\n        ];\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\PaymentReceipt;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\n\nclass PaymentReceiptResource extends Resource\n{\n    protected static ?string $model = PaymentReceipt::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.paymentReceipts.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Select::make('payment_for')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'fuel service',\n                            '2' => 'daily salary',\n                            '3' => 'invoice',\n                        ]),\n\n                    Select::make('supplier_id')\n                        ->nullable()\n                        ->relationship('supplier', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    Select::make('user_id')\n                        ->nullable()\n                        ->relationship('user', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('total_amount')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp '),\n\n                    TextInput::make('transfer_amount')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n\n                    FileUpload::make('image_adjust')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('payment_for'),\n\n                TextColumn::make('supplier.name'),\n\n                TextColumn::make('user.name'),\n\n                TextColumn::make('total_amount')->numeric(\n                    decimalSeparator: ',',\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('transfer_amount')->numeric(\n                    decimalSeparator: ',',\n                    thousandsSeparator: '.'\n                ),\n\n                ImageColumn::make('image_adjust')->visibility('public'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\FuelServicesRelationManager::class,\n            RelationManagers\\DailySalariesRelationManager::class,\n            RelationManagers\\InvoicePurchasesRelationManager::class,\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListPaymentReceipts::route('/'),\n            'create' => Pages\\CreatePaymentReceipt::route('/create'),\n            'view' => Pages\\ViewPaymentReceipt::route('/{record}'),\n            'edit' => Pages\\EditPaymentReceipt::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}