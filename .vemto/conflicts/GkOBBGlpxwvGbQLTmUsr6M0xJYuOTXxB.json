{
    "conflicts": [
        {
            "id": "fe445346-c284-4454-979c-25dded1491e4",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Purchases;\nuse App\\Filament\\Filters\\SelectStoreFilter;\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Forms\\StoreSelect;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\RequestPurchase;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse App\\Filament\\Resources\\Panel\\RequestPurchaseResource\\Pages;\nuse App\\Models\\Product;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Components\\TextInput;\nuse Filament\\Forms\\Get;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Illuminate\\Support\\Facades\\Auth;\n\nclass RequestPurchaseResource extends Resource\n{\n    protected static ?string $model = RequestPurchase::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Invoice';\n\n    protected static ?string $cluster = Purchases::class;\n\n    protected static ?string $pluralLabel = 'Invoice';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.requestPurchases.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.requestPurchases.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.requestPurchases.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['md' => 2])->schema([\n                    StoreSelect::make('store_id'),\n\n                    DateInput::make('date'),\n\n                ]),\n            ]),\n\n            Section::make()->schema([\n                self::getItemsRepeater(),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $requestPurchases = RequestPurchase::query();\n\n        if (!Auth::user()->hasRole('admin')) {\n            $requestPurchases->where('user_id', Auth::id());\n        }\n\n        return $table\n            ->query($requestPurchases)\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('store.nickname'),\n\n                TextColumn::make('date'),\n\n                TextColumn::make('detailRequests')\n                    ->label('Orders')\n                    ->formatStateUsing(function (RequestPurchase $record) {\n                        return implode('<br>', $record->detailRequests->map(function ($item) {\n                            $statusLabels = [\n                                '1' => '<span class=\"badge bg-warning\">process</span>',\n                                '2' => '<span class=\"badge bg-success\">done</span>',\n                                '3' => '<span class=\"badge bg-danger\">reject</span>',\n                                '4' => '<span class=\"badge bg-info\">approved</span>',\n                                '5' => '<span class=\"badge bg-secondary\">not valid</span>',\n                                '6' => '<span class=\"bg-gray-500 badge\">not used</span>',\n                            ];\n\n                            // Pilih label status berdasarkan nilai status\n                            $status = $statusLabels[$item->status] ?? '<span class=\"badge bg-default\">unknown</span>';\n\n                            return \"{$item->product->name} = {$item->quantity_plan} {$item->product->unit->unit} ({$status})\";\n                        })->toArray());\n                    })\n                    ->html() // Mengizinkan HTML dalam kolom\n                    ->extraAttributes(['class' => 'whitespace-pre-wrap']),\n\n                TextColumn::make('user.name')->hidden(fn() => !Auth::user()->hasRole('admin')),\n\n                // StatusColumn::make('status'),\n            ])\n            ->filters([\n                SelectStoreFilter::make('store_id')\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('date', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListRequestPurchases::route('/'),\n            'create' => Pages\\CreateRequestPurchase::route('/create'),\n            'view' => Pages\\ViewRequestPurchase::route('/{record}'),\n            'edit' => Pages\\EditRequestPurchase::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getItemsRepeater(): Repeater\n    {\n\n        return Repeater::make('detailRequests')\n            ->relationship()\n            ->minItems(1)\n            ->mutateRelationshipDataBeforeCreateUsing(function (array $data, RequestPurchase $record): array {\n                $data['store_id'] = $record->store_id;\n                $data['payment_type_id'] = optional(Product::find($data['product_id']))->payment_type_id;\n                $data['status'] = '1';\n\n                return $data;\n            })\n            ->schema([\n                Select::make('product_id')\n                    ->relationship('product', 'name')\n                    ->hiddenLabel()\n                    ->placeholder('Product')\n                    ->required()\n                    ->preload()\n                    ->searchable()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    // ->disabled(fn (Get $get) => $get('status') != 1)\n                    ->reactive()\n                    ->columnSpan(3),\n\n                TextInput::make('quantity_plan')\n                    ->required()\n                    ->hiddenLabel()\n                    ->placeholder('Quantity Plan')\n                    ->minValue(1)\n                    ->numeric()\n                    ->suffix(function (Get $get) {\n                        $product = Product::find($get('product_id'));\n                        return $product ? $product->unit->unit : '';\n                    })\n                    ->columnSpan(1),\n\n                Select::make('status')\n                    ->hiddenLabel()\n                    ->options([\n                        '1' => 'process',\n                        '2' => 'done',\n                        '3' => 'reject',\n                        '4' => 'approved',\n                        '5' => 'not valid',\n                        '6' => 'not used',\n                    ])\n                    ->default(1)\n                    ->disabled(fn() => !Auth::user()->hasRole('admin'))\n                    ->columnSpan(2),\n\n            ])\n            ->columns([\n                'md' => 6,\n            ])\n            ->defaultItems(1);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\RequestPurchase;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\DatePicker;\nuse App\\Filament\\Resources\\Panel\\RequestPurchaseResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\RequestPurchaseResource\\RelationManagers;\n\nclass RequestPurchaseResource extends Resource\n{\n    protected static ?string $model = RequestPurchase::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.requestPurchases.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.requestPurchases.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.requestPurchases.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    Select::make('store_id')\n                        ->required()\n                        ->relationship('store', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                TextColumn::make('store.name'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('user.name'),\n\n                TextColumn::make('status'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListRequestPurchases::route('/'),\n            'create' => Pages\\CreateRequestPurchase::route('/create'),\n            'view' => Pages\\ViewRequestPurchase::route('/{record}'),\n            'edit' => Pages\\EditRequestPurchase::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}