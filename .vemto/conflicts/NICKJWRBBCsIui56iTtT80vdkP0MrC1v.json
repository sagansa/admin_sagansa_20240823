{
    "conflicts": [
        {
            "id": "1233890a-9d61-4dd9-9584-e98e59c7afd3",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Columns\\CurrencyColumn;\nuse App\\Filament\\Forms\\BaseSelectInput;\nuse App\\Filament\\Forms\\CurrencyInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\Notes;\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\PaymentReceipt;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\nuse App\\Models\\DailySalary;\nuse App\\Models\\DailySalaryPaymentReceipt;\nuse App\\Models\\FuelService;\nuse App\\Models\\InvoicePurchase;\nuse Filament\\Actions\\Action;\nuse Filament\\Forms\\Components\\Checkbox;\nuse Filament\\Forms\\Components\\CheckboxList;\nuse Filament\\Forms\\Components\\KeyValue;\nuse Filament\\Forms\\Components\\Radio;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Icetalker\\FilamentTableRepeater\\Forms\\Components\\TableRepeater;\nuse Illuminate\\Support\\Facades\\Mail;\n\nclass PaymentReceiptResource extends Resource\n{\n    protected static ?string $model = PaymentReceipt::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Purchase';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.paymentReceipts.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public function updateSections()\n    {\n        $paymentFor = request()->input('payment_for');\n\n        // Tampilkan section berdasarkan nilai payment_for\n        if ($paymentFor == '1') {\n            // Tampilkan section fuel services\n        } elseif ($paymentFor == '2') {\n            // Tampilkan section daily salaries\n        } elseif ($paymentFor == '3') {\n            // Tampilkan section invoice purchases\n        }\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n\n                    Radio::make('payment_for')\n                        ->options([\n                            '1' => 'fuel service',\n                            '2' => 'daily salary',\n                            '3' => 'invoice',\n                        ])\n                        ->inline()\n                        ->reactive()\n                        ->afterStateUpdated(function ($state, $set) {\n                            if ($state == '1') {\n                                $items = FuelService::where('status', '1')->where('payment_type_id', '1')->get()->map(function ($item) {\n                                    return ['fuel_service_id' => $item->id];\n                                })->toArray();\n                                self::updateInstanceStatusAndCalculateTotalAmount($items, $set, FuelService::class, 'fuel_service_id');\n                            } elseif ($state == '2') {\n                                $items = DailySalary::where('status', '3')->where('payment_type_id', '1')->get()->map(function ($item) {\n                                    return ['daily_salary_id' => $item->id];\n                                })->toArray();\n                                self::updateInstanceStatusAndCalculateTotalAmount($items, $set, DailySalary::class, 'daily_salary_id');\n                            } elseif ($state == '3') {\n                                $items = InvoicePurchase::all()->map(function ($item) {\n                                    return ['invoice_purchase_id' => $item->id];\n                                })->toArray();\n                                self::updateInstanceStatusAndCalculateTotalAmount($items, $set, InvoicePurchase::class, 'invoice_purchase_id');\n                            }\n                        }),\n\n                    Select::make('supplier_id')\n                        ->relationship('supplier', 'name')\n                        ->required()\n\n                ]),\n            ]),\n\n            Section::make()->schema([\n                self::getInvoicePurchasesRepeater()\n                ])\n                ->visible(fn ($get) => $get('payment_for') == '3')\n                ->hidden(fn ($operation) => $operation === 'edit' || $operation === 'view'),\n\n            Section::make()->schema([\n                self::getDailySalariesRepeater()\n                ])\n                ->visible(fn ($get) => $get('payment_for') == '2')\n                ->hidden(fn ($operation) => $operation === 'edit' || $operation === 'view'),\n\n            Section::make()->schema([\n                self::getFuelServicesRepeater()\n                ])\n                ->visible(fn ($get) => $get('payment_for') == '1')\n                ->hidden(fn ($operation) => $operation === 'edit' || $operation === 'view'),\n\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n\n                    TextInput::make('total_amount')\n                        ->hiddenLabel()\n                        ->readOnly()\n                        ->default(0)\n                        ->placeholder('Total Amount')\n                        ->required()\n                        ->numeric()\n                        ->prefix('Rp'),\n\n                    TextInput::make('transfer_amount')\n                        ->hiddenLabel()\n                        ->prefix('Rp')\n                        ->required()\n                        ->numeric()\n                        ->placeholder('Transfer Amount'),\n\n                    ImageInput::make('image_adjust')\n                        ->hidden(fn ($operation) => $operation === 'create'),\n\n                    Notes::make('notes')\n                        ->hidden(fn ($operation) => $operation === 'create'),\n\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')\n                    ->label('Payment')\n                    ->visibility('public'),\n\n                ImageColumn::make('image_adjust')\n                    ->label('insufficient')\n                    ->visibility('public'),\n\n                TextColumn::make('supplier.name'),\n\n                TextColumn::make('created_at')\n                    ->date(),\n\n                TextColumn::make('payment_for')\n                    ->formatStateUsing(\n                        fn(string $state): string => match ($state) {\n                            '1' => 'fuel service',\n                            '2' => 'daily salary',\n                            '3' => 'invoice purchase',\n                    }),\n\n                CurrencyColumn::make('total_amount'),\n\n                CurrencyColumn::make('transfer_amount'),\n\n            ])\n\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make()\n                    ->visible(fn ($record) => self::calculateDifference($record) !== 0),\n                Tables\\Actions\\ViewAction::make()\n                    ->visible(fn ($record) => self::calculateDifference($record) === 0),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('created_at', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\FuelServicesRelationManager::class,\n            RelationManagers\\DailySalariesRelationManager::class,\n            RelationManagers\\InvoicePurchasesRelationManager::class,\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListPaymentReceipts::route('/'),\n            'create' => Pages\\CreatePaymentReceipt::route('/create'),\n            'view' => Pages\\ViewPaymentReceipt::route('/{record}'),\n            'edit' => Pages\\EditPaymentReceipt::route('/{record}/edit'),\n        ];\n    }\n\n    public static function getInvoicePurchasesRepeater(): Repeater\n    {\n        $invoicePurchases = InvoicePurchase::all()->map(function ($item) {\n            return [\n                'invoice_purchase_id' => $item->id,\n                'amount' => $item->amount,\n            ];\n        });\n\n        return TableRepeater::make('invoicePurchases')\n            ->label('')\n            ->default($invoicePurchases)\n            ->relationship('invoicePurchases')\n            ->schema([\n                Select::make('invoice_purchase_id')\n                    ->native(false)\n                    ->options(InvoicePurchase::pluck('date', 'id')),\n                TextInput::make('amount'),\n            ]);\n    }\n\n    public static function getDailySalariesRepeater(): Repeater // OK\n    {\n        $dailySalaries = DailySalary::where('status', '3')->where('payment_type_id', '1')\n            ->get()\n            ->map(function ($item) {\n                return [\n                    'daily_salary_id' => $item->id,\n                ];\n            })->toArray();\n\n        $options = DailySalary::where('status', '3')\n            ->where('payment_type_id', '1')\n            ->get()\n            ->mapWithKeys(function ($dailySalary) {\n                return [$dailySalary->id => $dailySalary->daily_salary_name];\n            })->all();\n\n        return TableRepeater::make('dailySalaryPaymentReceipts')\n            ->hiddenLabel()\n            ->default($dailySalaries)\n            ->relationship()\n            ->schema([\n                Select::make('daily_salary_id')\n                    ->label('Daily Salary')\n                    ->native(false)\n                    ->required()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    ->options($options),\n            ])\n            ->afterStateUpdated(function ($state, $set) {\n                self::updateInstanceStatusAndCalculateTotalAmount($state, $set, DailySalary::class, 'daily_salary_id');\n            });\n    }\n\n    public static function getFuelServicesRepeater(): Repeater\n    {\n        $options = FuelService::where('status', '1')\n            ->where('payment_type_id', '1')\n            ->get()\n            ->mapWithKeys(function ($fuelService) {\n                return [$fuelService->id => $fuelService->fuel_service_name];\n            })->all();\n\n        return TableRepeater::make('fuelServicePaymentReceipts')\n            ->hiddenLabel()\n            ->relationship()\n            ->schema([\n                Select::make('fuel_service_id')\n                    ->label('Fuel Service')\n                    ->native(false)\n                    ->required()\n                    ->disableOptionsWhenSelectedInSiblingRepeaterItems()\n                    ->options($options),\n            ])\n            ->afterStateUpdated(function ($state, $set) {\n                self::updateInstanceStatusAndCalculateTotalAmount($state, $set, FuelService::class, 'fuel_service_id');\n            });\n    }\n\n    public static function calculateDifference($record)\n    {\n        return $record->total_amount - $record->transfer_amount;\n    }\n\n\n    protected static function calculateTotalAmount($state, $model, $field)\n    {\n        $totalAmount = 0;\n        foreach ($state as $item) {\n            $instance = $model::find($item[$field]);\n            if ($instance) {\n                $totalAmount += $instance->amount;\n                // Update the status of the instance to 2\n                $instance->status = 2;\n                $instance->save();\n            }\n        }\n        return $totalAmount;\n    }\n\n    protected static function updateInstanceStatusAndCalculateTotalAmount($items, $set, $model, $field)\n    {\n        $totalAmount = 0;\n        foreach ($items as $item) {\n            $instance = $model::find($item[$field]);\n            if ($instance) {\n                $totalAmount += $instance->amount;\n                // Update the status of the instance to 2\n                $instance->status = 2;\n                $instance->save();\n            }\n        }\n        $set('total_amount', $totalAmount);\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\PaymentReceipt;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\PaymentReceiptResource\\RelationManagers;\n\nclass PaymentReceiptResource extends Resource\n{\n    protected static ?string $model = PaymentReceipt::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.paymentReceipts.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.paymentReceipts.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    Select::make('payment_for')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false)\n                        ->options([\n                            '1' => 'fuel service',\n                            '2' => 'daily salary',\n                            '3' => 'invoice',\n                        ]),\n\n                    TextInput::make('total_amount')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp '),\n\n                    TextInput::make('transfer_amount')\n                        ->required()\n                        ->numeric()\n                        ->step(1)\n                        ->prefix('Rp'),\n\n                    FileUpload::make('image_adjust')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('payment_for'),\n\n                TextColumn::make('total_amount')->numeric(\n                    decimalSeparator: ',',\n                    thousandsSeparator: '.'\n                ),\n\n                TextColumn::make('transfer_amount')->numeric(\n                    decimalSeparator: ',',\n                    thousandsSeparator: '.'\n                ),\n\n                ImageColumn::make('image_adjust')->visibility('public'),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            RelationManagers\\FuelServicesRelationManager::class,\n            RelationManagers\\DailySalariesRelationManager::class,\n            RelationManagers\\InvoicePurchasesRelationManager::class,\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListPaymentReceipts::route('/'),\n            'create' => Pages\\CreatePaymentReceipt::route('/create'),\n            'view' => Pages\\ViewPaymentReceipt::route('/{record}'),\n            'edit' => Pages\\EditPaymentReceipt::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}