{
    "conflicts": [
        {
            "id": "3abd5c91-d119-4c4e-a3c7-80b8fdc8e16c",
            "currentContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse App\\Filament\\Clusters\\Purchases;\nuse App\\Filament\\Columns\\CurrencyColumn;\nuse App\\Filament\\Columns\\StatusColumn;\nuse App\\Filament\\Forms\\CurrencyInput;\nuse App\\Filament\\Forms\\CurrencyMinusInput;\nuse App\\Filament\\Forms\\CurrencyRepeaterInput;\nuse App\\Filament\\Forms\\DateInput;\nuse App\\Filament\\Forms\\ImageInput;\nuse App\\Filament\\Forms\\Notes;\nuse App\\Filament\\Forms\\StatusSelectLabel;\nuse Filament\\Tables;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\CashAdvance;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse App\\Filament\\Resources\\Panel\\CashAdvanceResource\\Pages;\nuse Filament\\Forms\\Components\\Group;\nuse Filament\\Forms\\Components\\Repeater;\nuse Filament\\Forms\\Get;\nuse Filament\\Forms\\Set;\nuse Filament\\Tables\\Actions\\ActionGroup;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Illuminate\\Support\\Facades\\Auth;\nuse Filament\\Tables\\Filters\\SelectFilter;\nuse Illuminate\\Database\\Eloquent\\Collection;\n\nclass CashAdvanceResource extends Resource\n{\n    protected static ?string $model = CashAdvance::class;\n\n    // protected static ?string $navigationIcon = 'heroicon-o-banknotes';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $cluster = Purchases::class;\n\n    protected static ?string $navigationGroup = 'Advances';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.cashAdvances.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.cashAdvances.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.cashAdvances.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()\n                ->schema(static::getDetailsFormHeadSchema()),\n\n            Section::make()\n                ->schema([\n                    static::getItemsRepeater()\n                ])\n                ->hidden(fn($operation) => $operation === 'create'),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        $cashAdvance = CashAdvance::query();\n\n        if (!Auth::user()->hasRole('admin')) {\n            $cashAdvance->where('user_id', Auth::id());\n        }\n\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('date'),\n\n                CurrencyColumn::make('transfer'),\n\n                CurrencyColumn::make('purchase'),\n\n                CurrencyColumn::make('before'),\n\n                CurrencyColumn::make('remains'),\n\n                TextColumn::make('user.name'),\n\n                StatusColumn::make('status'),\n            ])\n            ->filters([\n                SelectFilter::make('user_id')\n                    ->label('user')\n                    ->relationship('user', 'name')\n            ])\n            ->actions([\n                ActionGroup::make([\n                    Tables\\Actions\\EditAction::make(),\n                    Tables\\Actions\\ViewAction::make(),\n                ])\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                    Tables\\Actions\\BulkAction::make('setStatusToSudahDiperiksa')\n                        ->label('Set Status to Sudah Diperiksa')\n                        ->icon('heroicon-o-check')\n                        ->requiresConfirmation()\n                        ->action(function (Collection $records) {\n                            CashAdvance::whereIn('id', $records->pluck('id'))->update(['status' => 2]);\n                        })\n                        ->color('success'),\n                ]),\n            ])\n            ->defaultSort('date', 'desc');\n    }\n\n    public static function getDetailsFormHeadSchema(): array\n    {\n        return [\n            Grid::make(['default' => 1])->schema([\n                ImageInput::make('image')\n                    ->directory('images/CashAdvance'),\n\n                Group::make()->schema([\n                    Select::make('user_id')\n                        ->label('User')\n                        ->inlineLabel()\n                        ->required()\n                        ->relationship('user', 'name', fn(Builder $query) => $query\n                            ->whereHas('roles', fn(Builder $query) => $query\n                                ->where('name', 'staff') || $query\n                                ->where('name', 'supervisor')))\n                        ->searchable()\n                        ->preload()\n                        ->columnSpan([\n                            'md' => 4,\n                        ])\n                        ->reactive()\n                        ->afterStateUpdated(function ($state, callable $set) {\n                            if ($state) {\n                                $set('before', CashAdvanceResource::getRemainBefore($state));\n                            }\n                        }),\n\n                    DateInput::make('date')\n                        ->columnSpan([\n                            'md' => 4,\n                        ]),\n\n                    StatusSelectLabel::make('status')\n                        ->label('Status')\n                        ->inlineLabel()\n                        ->columnSpan([\n                            'md' => 4,\n                        ]),\n\n                    CurrencyInput::make('transfer')\n                        ->label('Transfer')\n                        ->debounce(2000)\n                        ->reactive()\n                        ->afterStateUpdated(function (Set $set, Get $get) {\n                            self::updateTotalPurchase($get, $set);\n                        })\n                        ->columnSpan([\n                            'md' => 3,\n                        ]),\n\n                    CurrencyMinusInput::make('before')\n                        ->label('Before')\n                        ->debounce(2000)\n                        ->reactive()\n                        ->afterStateUpdated(function (Set $set, Get $get) {\n                            self::updateTotalPurchase($get, $set);\n                        })\n                        ->columnSpan([\n                            'md' => 3,\n                        ]),\n\n                    CurrencyInput::make('purchase')\n                        ->readOnly()\n                        ->label('Purchase')\n                        ->afterStateUpdated(function (Set $set, Get $get) {\n                            self::updateTotalPurchase($get, $set);\n                        })\n                        ->columnSpan([\n                            'md' => 3,\n                        ]),\n\n                    CurrencyMinusInput::make('remains')\n                        ->readOnly()\n                        ->label('Remains')\n                        ->columnSpan([\n                            'md' => 3,\n                        ]),\n\n                ])->columns([\n                    'md' => 12,\n                ]),\n\n                Notes::make('notes'),\n\n            ])->afterStateUpdated(function (Set $set, Get $get) {\n                self::updateTotalPurchase($get, $set);\n            }),\n        ];\n    }\n\n    public static function getRelations(): array\n    {\n        return [\n            // RelationManagers\\AdvancePurchasesRelationManager::class\n        ];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListCashAdvances::route('/'),\n            'create' => Pages\\CreateCashAdvance::route('/create'),\n            'view' => Pages\\ViewCashAdvance::route('/{record}'),\n            'edit' => Pages\\EditCashAdvance::route('/{record}/edit'),\n        ];\n    }\n\n    protected static function updateTotalPurchase(Get $get, Set $set): void\n    {\n        $repeaterItems = $get('advancePurchases') ?? [];\n\n        $totalPurchase = 0;\n\n        foreach ($repeaterItems as $item) {\n            if (isset($item['total_price'])) {\n                $totalPurchase += (int) $item['total_price'];\n            }\n        }\n\n        $set('purchase', $totalPurchase);\n\n        $transfer = $get('transfer') !== null ? (int) $get('transfer') : 0;\n        $before = $get('before') !== null ? (int) $get('before') : 0;\n        $remains = $transfer + $before - $totalPurchase;\n\n        $set('remains', $remains);\n    }\n\n    public static function getItemsRepeater(): Repeater\n    {\n        return Repeater::make('advancePurchases')\n            ->hiddenLabel()\n            ->columns(['md' => 8])\n            ->relationship()\n            ->schema([\n                Select::make('supplier_id')\n                    ->hiddenLabel()\n                    ->disabled()\n                    ->relationship('supplier', 'name')\n                    ->columnSpan(4),\n\n                Select::make('store_id')\n                    ->hiddenLabel()\n                    ->disabled()\n                    ->relationship('store', 'nickname')\n                    ->columnSpan(2),\n\n                CurrencyRepeaterInput::make('total_price')\n                    ->afterStateUpdated(function (Get $get, Set $set) {\n                        self::updateTotalPurchase($get, $set);\n                    })\n                    ->columnSpan(2),\n            ])\n            ->afterStateUpdated(function (Get $get, Set $set) {\n                self::updateTotalPurchase($get, $set);\n            });\n    }\n\n    public static function getRemainBefore($userId)\n    {\n        $remainBefore = CashAdvance::where('user_id', $userId)\n            ->latest('created_at')\n            ->first();\n\n        return $remainBefore ? $remainBefore->remains : 0;\n    }\n}\n",
            "newContent": "<?php\n\nnamespace App\\Filament\\Resources\\Panel;\n\nuse Filament\\Forms;\nuse Filament\\Tables;\nuse Livewire\\Component;\nuse Filament\\Forms\\Form;\nuse Filament\\Tables\\Table;\nuse App\\Models\\CashAdvance;\nuse Filament\\Resources\\Resource;\nuse Filament\\Forms\\Components\\Grid;\nuse Filament\\Forms\\Components\\Select;\nuse Filament\\Forms\\Components\\Section;\nuse Filament\\Tables\\Columns\\TextColumn;\nuse Filament\\Tables\\Columns\\ImageColumn;\nuse Filament\\Forms\\Components\\TextInput;\nuse Illuminate\\Database\\Eloquent\\Builder;\nuse Filament\\Forms\\Components\\FileUpload;\nuse Filament\\Forms\\Components\\DatePicker;\nuse Filament\\Forms\\Components\\RichEditor;\nuse App\\Filament\\Resources\\Panel\\CashAdvanceResource\\Pages;\nuse App\\Filament\\Resources\\Panel\\CashAdvanceResource\\RelationManagers;\n\nclass CashAdvanceResource extends Resource\n{\n    protected static ?string $model = CashAdvance::class;\n\n    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';\n\n    protected static ?int $navigationSort = 1;\n\n    protected static ?string $navigationGroup = 'Admin';\n\n    public static function getModelLabel(): string\n    {\n        return __('crud.cashAdvances.itemTitle');\n    }\n\n    public static function getPluralModelLabel(): string\n    {\n        return __('crud.cashAdvances.collectionTitle');\n    }\n\n    public static function getNavigationLabel(): string\n    {\n        return __('crud.cashAdvances.collectionTitle');\n    }\n\n    public static function form(Form $form): Form\n    {\n        return $form->schema([\n            Section::make()->schema([\n                Grid::make(['default' => 1])->schema([\n                    FileUpload::make('image')\n                        ->rules(['image'])\n                        ->nullable()\n                        ->maxSize(1024)\n                        ->image()\n                        ->imageEditor()\n                        ->imageEditorAspectRatios([null, '16:9', '4:3', '1:1']),\n\n                    DatePicker::make('date')\n                        ->rules(['date'])\n                        ->required()\n                        ->native(false),\n\n                    TextInput::make('transfer')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('user_id')\n                        ->required()\n                        ->relationship('user', 'name')\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    TextInput::make('before')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('purchase')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    TextInput::make('remains')\n                        ->required()\n                        ->numeric()\n                        ->step(1),\n\n                    Select::make('status')\n                        ->required()\n                        ->searchable()\n                        ->preload()\n                        ->native(false),\n\n                    RichEditor::make('notes')\n                        ->nullable()\n                        ->string()\n                        ->fileAttachmentsVisibility('public'),\n                ]),\n            ]),\n        ]);\n    }\n\n    public static function table(Table $table): Table\n    {\n        return $table\n            ->poll('60s')\n            ->columns([\n                ImageColumn::make('image')->visibility('public'),\n\n                TextColumn::make('date')->since(),\n\n                TextColumn::make('transfer'),\n\n                TextColumn::make('user.name'),\n\n                TextColumn::make('before'),\n\n                TextColumn::make('purchase'),\n\n                TextColumn::make('remains'),\n\n                TextColumn::make('status'),\n\n                TextColumn::make('notes')->limit(255),\n            ])\n            ->filters([])\n            ->actions([\n                Tables\\Actions\\EditAction::make(),\n                Tables\\Actions\\ViewAction::make(),\n            ])\n            ->bulkActions([\n                Tables\\Actions\\BulkActionGroup::make([\n                    Tables\\Actions\\DeleteBulkAction::make(),\n                ]),\n            ])\n            ->defaultSort('id', 'desc');\n    }\n\n    public static function getRelations(): array\n    {\n        return [];\n    }\n\n    public static function getPages(): array\n    {\n        return [\n            'index' => Pages\\ListCashAdvances::route('/'),\n            'create' => Pages\\CreateCashAdvance::route('/create'),\n            'view' => Pages\\ViewCashAdvance::route('/{record}'),\n            'edit' => Pages\\EditCashAdvance::route('/{record}/edit'),\n        ];\n    }\n}\n"
        }
    ]
}